---
title: "Save time and nerves by controlling different Python versions (*pyenv*) and managing virtual environments (*virtualenvwrapper*)"
author: "GG Supp"
date: "2022-10-28"
categories: [news, code, analysis]
knitr: true
image: "image.jpg"
draft: true
format:
  html:
    code-copy: hover
---

# Summary

Most people's computers have multiple Python versions installed (Macs come with Python pre-installed, often termed system Python). Keeping these versions (the pre-installed system Python version and other user-installed Python versions) separate and controlling them independently (e.g. installing or updating a given Python package for a specific Python version only) requires an upfront solution. Working with virtual environments, i.e. having a separate work-space for each individual project, necessitates actively defining the Python version that will be used to create a specific virtual environment. Controlling Python versions is thus linked to the task of managing virtual environments. All packages installed in a specific virtual environment will not conflict with other virtual environments (all packages being contained in that particular work-space).

Following the steps outlined here below, your computer should be in a state where different Python versions coexist peacefully and where you can safely install, upgrade, or remove libraries without affecting other projects. In fact, a working setup that is simple to maintain.

# Introduction

A certainty, especially in the world of programming, is that there are numerous paths to the same destination. As a result, there is a plethora of advice available on how to arrive at a working (and hopefully maintainable) setup of a local computer to do data science using Python.

Speaking from personal experience, I was always too busy doing the actual work to contemplate about the "ideal" setup, so I decided for the moment to ignore any best practices that might exist somewhere. Besides, given the vast amount of information available, determining the right blueprint to follow is not an easy task (just considering the combinatorial nightmare of different operating systems, python versions, installed or assumed pre-installed software, various IDEs etc etc). In short, there are many flying pieces and thus many degrees of freedom, which inevitably leads to complexity.

However, sooner or later the day always comes when you can't afford to ignore the Python setup issue any longer simply because something broke (e.g. after installing a new Python package or upgrading an installed one). From that moment on you will be busy finding a way to continue your work. Sometimes a quick fix is possible (after consulting numerous entries at Stack Overflow or similar websites), but sometimes band-aid is not enough, so that you need a fundamental solution.

In order to spare you time, research effort and hopefully some nerves I will concisely summarize all steps that resulted into my tested setup. Each step builds on different sources of advice that I will cite along the way (i.e. credits, attribution and thanks are given by explicit references).

::: {.callout-note collapse="true"}
I used the phrase "fundamental solution" above for a reason: in case you got totally lost with quick fixes that resulted in even more problems later on a fresh installation of the operating system is certainly a radical approach. However, it provides a clean start from where you can begin building your new robust setup that is maintainable for all your future projects. I wrote the following lines with a fresh installation of the operating system in mind.
:::

I wrote this summary using macOS (version: 12.6), but you should be able to follow equivalent steps on Linux or Windows (you might need to make some modifications).

------------------------------------------------------------------------

# Overview

We'll go through three main steps. The list below is intended to provide you with a high-level overview. Each of the three main steps will be explained in detail in the next section (see Details):

1.  **Install the** ***homebrew*** **package manager** (macOS/Linux)\
    (If you are not sure if you have please check and eventually update it: see details below)

2.  **Install** ***pyenv*** (using *homebrew*)

    a.  Running the installation command in the terminal

    b.  Configure your terminal (setup your .zsrh file for *pyenv*)

    c.  Using *pyenv* to install a new Python version (in addition to your system Python version)

    d.  Switching between the availability of different Python versions

::: {.callout-tip icon="false" collapse="true"}
## About: *pyenv*

The library *pyenv* is a wonderful tool that allows you to control and switch between all different Python versions installed on your computer. Each new Python version you install using pyenv will be neatly isolated from all other versions; this is equally and importantly true for the system Python version that comes pre-installed on macOS (located in `/usr/bin/python3`). In this way you can also make sure you don't mess with this system Python version that is a constituting part of your operating system. That is, your computer depends on it. A great summary about *pyenv* can be found here \[[\*](https://realpython.com/intro-to-pyenv/)\].
:::

3.  **Install *virtualenvwrapper*** using your system Python version\
    (and its associated *pip* version)

    a.  Running the installation command in the terminal

    b.  Configure your terminal to load the *virtualenvwrapper* commands

    c.  Setup a new virtual environment on the basis of a specific Python version

::: {.callout-tip collapse="true" icon="false"}
## About: *virtualenvwrapper*

Using callouts is an effective way to highlight content that your reader give special consideration or attention.
:::

------------------------------------------------------------------------

# Details

## 1. Install the *homebrew* package manager

As a first step you should install [homebrew](https://brew.sh/) which is a very useful and straightforward package manager (for macOS/Linux). In order to enter the code below open a terminal window (you can do this by opening macOS spotlight - or via your keyboard: just hit both keys *`command`* + *`space`* at once - then type "terminal" and open this application).

Now that you have your terminal window open, you can enter the following commands shown below (select the commands matching your case):

::: panel-tabset
## Install homebrew

To install *homebrew* on your computer: paste this command in your terminal window and hit *enter.* After hitting *enter* the script will explain what it will do and then pauses before it does it:

``` default
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)
```

## Check homebrew (installed/version)

To verify and check whether you have *homebrew* already installed you can enter the command. shown below. In the case you have homebrew installed the output will tell you which version it is. If you don't have it installed yet, the output will tell you something like `command not found`.

``` default
brew --version
```

Example output in case your computer has *homebrew* installed (your version might differ):

``` default
Homebrew 3.6.6 
Homebrew/homebrew-core (git revision 7ec3c2d24e8; last commit 2022-10-24) 
Homebrew/homebrew-cask (git revision c3048a8013; last commit 2022-10-24)
```

## Update homebrew

After having verified that your computer has *homebrew installed*, update it to make sure you have the latest version. Just enter the following command in your terminal window and hit enter \[[\*](https://docs.brew.sh/FAQ)\].

``` default
brew update
```
:::

## 2. Install *pyenv* (via *homebrew*)

**2a:** Run the following installation command in the terminal \[[\*](https://github.com/pyenv/pyenv#homebrew-in-macos)\].

``` default
brew install pyenv
```

**2b:** Now you need to configure your terminal (or shell) in a way so that the *pyenv* commands will be loaded. You do this by editing the configuration file of your terminal represented by `.zshrc`, `.bashrc` or other file types (sometimes subsumed under the term "shell's rc file", the affix means \"run commands\"). Given that macOS default is based on the `zsh` Unix shell - also known as Z shell - we will focus to edit only this configuration file (for other options please see this manual: \[[\*](https://github.com/pyenv/pyenv#set-up-your-shell-environment-for-pyenv)\]). The configuration file for `zsh` is called `.zshrc` and is located in your home folder (`~/.zshrc`).

Before editing it we should make sure that the hidden file `.zshrc` is actually there:

::: panel-tabset
## Check if `.zshrc` file is there (via Finder)

To view the hidden `.zshrc` file in your home directory you can do the following within macOS Finder: Open Finder and navigate to your home directory (e.g, something like `/Users/MyUserName/`): hit the following keys at once: *`Command`* + *`Shift`* +*`.`*

Using this command you told Finder to display usually hidden files (starting with a dot). If you see the file within Finder you can open it by selecting any text editing application (e.g. TextEdit). In case there is no such `.zshrc` file in your home directory, please create one: just see the instructions in this section (tab).

## Check if `.zshrc` file is there (via Terminal)

Open a terminal window (the hidden file should be located in your home folder: something like `/Users/MyUserName/`) and enter the following command:

``` default
open ~/.zshrc
```

In case this file doesn't exist you will receive a respective feedback ("file doesn't exist"). In case there is no such `.zshrc` file in your home directory, please create one: just see the instructions in this section (tab).

## Create `.zshrc` file (if its not there)

Within your terminal window enter the following command:

``` default
touch ~/.zshrc
```

The operation starting with `touch` will create the hidden `.zshrc` file in your home. You can verify the creation of this file by following one of the options shown in this section before (see tab).
:::

Since we made sure that the configuration file for our shell is indeed (i.e., the `.zshrc` file) available we can now to add the following three expressions to this configuration file. Adding these modifications to your shell's configuration:

``` default
echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.zshrc
echo 'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.zshrc
echo 'eval "$(pyenv init -)"' >> ~/.zshrc   
```

After having executed these commands your `.zshrc` file will have three new lines included.

::: {.callout-note collapse="true"}
## Note

You can verify the successful installation and setup of *pyenv* by entering the following command in your terminal window:

``` default
pyenv
```

If all went fine you should receive the output of the actual version of *pyenv* installed. In my case the output is as follows:

``` default
pyenv 2.3.5
```

In addition, you should see a list of command options (e.g. "\--version", "commands", "exec" and several more).

You can get an overview about all installed Python versions entering the following *pyenv* command:

``` default
pyenv versions
```

Since we haven't yet installed any additional Python version *pyenv* will show you the system Python version (pre-installed on our macOS): you will see something like this (exemplary output):

``` default
  * system (set by /Users/MyUserName/.pyenv/version)
```

Given that no other version of Python is installed *pyenv* is enlisting the Python system version. The star \* symbol identifies the Python version set to be global, that is the Python version that serves as the default version of Python which macOS uses when running Python applications.

You can use the following command to confirm the location of the Python system version:

``` default
pyenv which python3
```

This will show the following output:

``` default
/usr/bin/python3
```

This shows the actual path to your system Python version.

You might be tempted to enter the traditional terminal command `which python3` to locate the Python's location. However, this command will reveal only the *pyenv* path modifications inserted in your shell's configuration. In fact you will see something like this: `/Users/MyUserName/.pyenv/shims/python3`
:::
