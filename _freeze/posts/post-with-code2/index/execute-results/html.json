{
  "hash": "b9f5222b70a6a7886cb411a35e304aa7",
  "result": {
    "markdown": "---\ntitle: \"Save time & nerves: start controlling different Python versions (*pyenv*) and managing virtual environments (*virtualenvwrapper*)\"\nauthor: \"GG Supp\"\ndate: \"2022-11-01\"\ncategories: [news, code, analysis]\nknitr: true\nimage: \"image.jpg\"\ndraft: true\nformat:\n  html:\n    code-copy: hover\n---\n\n\n# Summary\n\nMost people's computers have multiple Python versions installed (Macs come with Python pre-installed, often termed system Python). Keeping these versions (the pre-installed system Python version and other user-installed Python versions) separate and controlling them independently (e.g. installing or updating a given Python package for a specific Python version only) requires an upfront solution. Working with virtual environments, i.e. having a separate workspace for each individual project, necessitates actively defining the Python version that will be used to create a specific virtual environment. Controlling Python versions is thus linked to the task of managing virtual environments. All packages installed in a specific virtual environment will not conflict with other virtual environments (all packages being contained in that particular workspace).\n\nFollowing the steps outlined here below, your computer should be in a state where different Python versions coexist peacefully and where you can safely install, upgrade, or remove libraries without affecting other projects. In fact, a working setup that is simple to maintain.\n\n# Introduction\n\nA certainty, especially in the world of programming, is that there are numerous paths to the same destination. As a result, there is a plethora of advice available on how to arrive at a working (and hopefully maintainable) setup of a local computer to do data science using Python.\n\nSpeaking from personal experience, I was always too busy doing the actual work to contemplate about the \"ideal\" setup, so I decided for the moment to ignore any best practices that might exist somewhere. Besides, given the vast amount of information available, determining the right blueprint to follow is not an easy task (just considering the combinatorial nightmare of different operating systems, python versions, installed or assumed pre-installed software, various IDEs etc etc). In short, there are many flying pieces and thus many degrees of freedom, which inevitably leads to complexity.\n\nHowever, sooner or later the day always comes when you can't afford to ignore the Python setup issue any longer simply because something broke (e.g. after installing a new Python package or upgrading an installed one). From that moment on you will be busy finding a way to continue your work. Sometimes a quick fix is possible (after consulting numerous entries at Stack Overflow or similar websites), but sometimes band-aid is not enough, so that you need a fundamental solution.\n\nIn order to spare you time, research effort and hopefully some nerves I will concisely summarize all steps that resulted into my tested setup. Each step builds on different sources of advice that I will cite along the way (i.e. credits, attribution and thanks are given by explicit references).\n\n::: {.callout-note collapse=\"true\"}\nI used the phrase \"fundamental solution\" above for a reason: in case you got totally lost with quick fixes that resulted in even more problems later on a fresh installation of the operating system is certainly a radical approach. However, it provides a clean start from where you can begin building your new robust setup that is maintainable for all your future projects. I wrote the following lines with a fresh installation of the operating system in mind.\n:::\n\nI wrote this summary using macOS (version: 12.6), but you should be able to follow equivalent steps on Linux or Windows (you might need to make some modifications).\n\n------------------------------------------------------------------------\n\n# Overview\n\nWe'll go through three main steps. The list below is intended to provide you with a high-level overview. Each of the three main steps will be explained in detail in the next sections (see Details):\n\n1.  **Install the** ***homebrew*** **package manager** (macOS/Linux)\\\n    (If you are not sure if you have please check and eventually update it: see details below)\n\n2.  **Install** ***pyenv*** (using *homebrew*)\n\n    a.  Running the installation command in the terminal\n\n    b.  Configure your terminal (setup your .zsrh file for *pyenv*)\n\n    c.  Using *pyenv* to install a new Python version (in addition to your system Python version)\n\n    d.  Switching between different Python versions available/installed on your computer\n\n::: {.callout-tip icon=\"false\" collapse=\"true\"}\n## About: *pyenv*\n\nThe library *pyenv* is a wonderful tool that allows you to control and switch between all different Python versions installed on your computer. Each new Python version you install using pyenv will be neatly isolated from all other versions; this is equally and importantly true for the system Python version that comes pre-installed on macOS (located in `/usr/bin/python3`). In this way you can also make sure you don't mess with this system Python version that is a constituting part of your operating system. That is, your computer depends on it. A great summary about *pyenv* can be found here \\[[\\*](https://realpython.com/intro-to-pyenv/)\\].\n:::\n\n3.  **Install *virtualenvwrapper*** using your system Python version\\\n    (and its associated *pip* version)\n\n    a.  Running the installation command in the terminal\n\n    b.  Configure your terminal to load the *virtualenvwrapper* commands\n\n    c.  Setup a new virtual environment on the basis of a specific Python version\n\n::: {.callout-tip collapse=\"true\" icon=\"false\"}\n## About: *virtualenvwrapper*\n\nThe library *virtualenvwrapper* is extremely useful tool to create and manage (such as activating/deactivating) virtual environments? Why should we care about virtual environments? The main reason is that virtual environments represent independent, totally separate workspaces for individual projects: any package installed in a given workspace will not interfere with the ones installed in other workspaces. Thus, in this way you are able to install different versions of the same package for each of your projects. This would be impossible when all of your projects' requirements (i.e. packages) were installed in the very same environment. Please find a fine and elaborate summary about this tool here \\[[\\*](https://opensource.com/article/21/2/python-virtualenvwrapper)\\].\n:::\n\n------------------------------------------------------------------------\n\n# Details\n\n## 1. Install the *homebrew* package manager\n\nAs a first step you should install [homebrew](https://brew.sh/) which is a very useful and straightforward package manager (for macOS/Linux). In order to enter the code below open a terminal window (you can do this by opening macOS spotlight - or via your keyboard: just hit both keys *`command`* + *`space`* at once - then type \"terminal\" and open this application).\n\nNow that you have your terminal window open, you can enter the following commands shown below (select the commands matching your case):\n\n::: panel-tabset\n## Install homebrew\n\nTo install *homebrew* on your computer: paste this command in your terminal window and hit *enter.* After hitting *enter* the script will explain what it will do and then pauses before it does it:\n\n``` default\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\n```\n\n## Check homebrew (installed/version)\n\nTo verify and check whether you have *homebrew* already installed you can enter the command. shown below. In the case you have homebrew installed the output will tell you which version it is. If you don't have it installed yet, the output will tell you something like `command not found`.\n\n``` default\nbrew --version\n```\n\nExample output in case your computer has *homebrew* installed (your version might differ):\n\n``` default\nHomebrew 3.6.6 \nHomebrew/homebrew-core (git revision 7ec3c2d24e8; last commit 2022-10-24) \nHomebrew/homebrew-cask (git revision c3048a8013; last commit 2022-10-24)\n```\n\n## Update homebrew\n\nAfter having verified that your computer has *homebrew installed*, update it to make sure you have the latest version. Just enter the following command in your terminal window and hit enter \\[[\\*](https://docs.brew.sh/FAQ)\\].\n\n``` default\nbrew update\n```\n:::\n\n## 2. Install *pyenv* (via *homebrew*)\n\n**2a:** Run the following installation command in the terminal \\[[\\*](https://github.com/pyenv/pyenv#homebrew-in-macos)\\].\n\n``` default\nbrew install pyenv\n```\n\n**2b:** Now you need to configure your terminal (or shell) in a way so that the *pyenv* commands will be loaded. You do this by editing the configuration file of your terminal represented by `.zshrc`, `.bashrc` or other file types (sometimes subsumed under the term \"shell's rc file\", the affix means \\\"run commands\\\"). Given that macOS default is based on the `zsh` Unix shell - also known as Z shell - we will focus to edit only this configuration file (for other options please see this manual: \\[[\\*](https://github.com/pyenv/pyenv#set-up-your-shell-environment-for-pyenv)\\]). The configuration file for `zsh` is called `.zshrc` and is located in your home folder (`~/.zshrc`).\n\nBefore editing it we should make sure that the hidden file `.zshrc` is actually there:\n\n::: panel-tabset\n## Check `.zshrc` via Finder\n\nTo view the hidden `.zshrc` file in your home directory you can do the following within macOS Finder: Open Finder and navigate to your home directory (e.g, something like `/Users/MyUserName/`): hit the following keys at once: *`Command`* + *`Shift`* +*`.`*\n\nUsing this command you told Finder to display usually hidden files (starting with a dot). If you see the file within Finder you can open it by selecting any text editing application (e.g. TextEdit). In case there is no such `.zshrc` file in your home directory, please create one: just see the instructions in this section (tab).\n\n## Check `.zshrc` via Terminal\n\nOpen a terminal window (the hidden file should be located in your home folder: something like `/Users/MyUserName/`) and enter the following command:\n\n``` default\nopen ~/.zshrc\n```\n\nIn case this file doesn't exist you will receive a respective feedback (\"file doesn't exist\"). In case there is no such `.zshrc` file in your home directory, please create one: just see the instructions in this section (tab).\n\n## Create `.zshrc` file (if its not there)\n\nWithin your terminal window enter the following command:\n\n``` default\ntouch ~/.zshrc\n```\n\nThe operation starting with `touch` will create the hidden `.zshrc` file in your home directory. You can verify the creation of this file by following one of the options shown in this section (see other tabs).\n:::\n\nSince we made sure that the configuration file for our shell is indeed available (i.e., the `.zshrc` file) we can now add the following three expressions to this configuration file. To add these modifications to your shell's configuration enter the following commands in your terminal:\n\n``` default\necho 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.zshrc\necho 'command -v pyenv >/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.zshrc\necho 'eval \"$(pyenv init -)\"' >> ~/.zshrc   \n```\n\nAfter having executed these commands your `.zshrc` file will have three new lines included.\n\n::: {.callout-note collapse=\"true\"}\n## Note\n\nYou can verify the successful installation and setup of *pyenv* by entering the following command in your terminal window:\n\n``` default\npyenv\n```\n\nIf all went fine, you should receive the output of the actual version of *pyenv* installed. In my case the output is as follows:\n\n``` default\npyenv 2.3.5\n```\n\nIn addition, you should see a list of command options (e.g. \"\\--version\", \"commands\", \"exec\" and several more).\n\nWith *pyenv* installed successfully you can get a nice overview about all installed Python versions: just enter the following *pyenv* command:\n\n``` default\npyenv versions\n```\n\nSince we haven't yet installed any additional Python version, *pyenv* will show you the system Python version (pre-installed on our macOS): you will see something like this (exemplary output):\n\n``` default\n  * system (set by /Users/MyUserName/.pyenv/version)\n```\n\nGiven that no other version of Python is installed *pyenv* is enlisting the Python system version. The star \\* symbol marks the Python version set to be global, that is the Python version that serves as the default version of Python which macOS uses when running Python applications.\n\nYou can use the following command to confirm the location of the Python system version:\n\n``` default\npyenv which python3\n```\n\nThis will show the following output:\n\n``` default\n/usr/bin/python3\n```\n\nThis shows the actual path to your system Python version.\n\nYou might be tempted to enter the traditional terminal command `which python3` to locate the Python's location. However, this command will reveal only the *pyenv* path modifications inserted in your shell's configuration. In fact you will see something like this: `/Users/MyUserName/.pyenv/shims/python3`\n:::\n\n**2c:** We are now ready to *pyenv* in order to install a new Python version. In case you know the precise Python version you would like to install (for the sake of this example let's say 3.10.5) simply execute the following *pyenv* command:\n\n``` default\npyenv install 3.10.5\n```\n\nTo verify which Python versions are installed and available on your computer just enter the following command we saw before:\n\n``` default\npyenv versions\n```\n\nThis time the output should look like along these lines:\n\n``` default\n* system (set by /Users/ggs/.pyenv/version)\n  3.10.5\n```\n\nThe output provides a list of all installed Python versions (remember the star \\* symbol marks the Python version set to be global).\n\n::: {.callout-tip collapse=\"true\" icon=\"false\"}\n## Nice to know: Which Python versions are available? \n\nIn case you would like to get a list of all Python versions that are available to be installed via *pyenv* you can use the following command (as a shortcut you can also type: `pyenv install -l)`:\n\n``` default\npyenv install --list\n```\n\nThis command will give you a list of available Python versions (and additionally showing other libraries we can ignore for the moment) such as:\n\n``` default\nAvailable versions:\n  2.1.3\n  2.2.3\n  2.3.7\n...\n  3.10.5\n  3.10.6\n  3.10.7\n...\n```\n:::\n\n**2d:** In our current example we have seen that there are two versions of Python installed on our computer. Using *pyenv* we can switch between these two Python versions, that is we can select one version and set it the global default: this global Python version will become the one macOS uses when running Python applications. Set a given Python version to global by executing the following command:\n\n``` default\npyenv global 3.10.5\n```\n\nWhen running the previously shown command `pyenv versions` again we will see that the Python version marked to be global has changed accordingly (exemplary output):\n\n``` default\nsystem\n* 3.10.5 (set by /Users/MyUserName/.pyenv/version)\n```\n\nAs intended the star \\* symbol marking the Python version set as global has changed. In case you have several more Python versions installed you can change to each one of them using the *pyenv* global command shown above.\n\nYou can change back to using your system Python version as the global one via the following command:\n\n``` default\npyenv global system\n```\n\n## 3. Install ***virtualenvwrapper*** using your system Python version (and its associated *pip* version)\n\n**3a:** Before you continue please consider the following important requirement:\n\n::: {.callout-important collapse=\"true\"}\n## Important\n\nBefore continuing with installing the *virtualenvwrapper* library make sure that your system Python version is set to global (just run the command `pyenv versions` and verify that the star \\* symbol is shown next to the system Python version - as detailed in step 2 above). If that is not the case, you can simply set the system Python version to global by executing this command: `pyenv global system`.\n:::\n\nBeing sure that you are using the correct Python version i.e. the system Python version, you can now run the following installation command that will install the *virtualenvwrapper* library on your computer \\[[\\*](https://virtualenvwrapper.readthedocs.io/en/latest/install.html#basic-installation)\\]. Note: The usage of the `sudo` command will require that you enter your admin password before the installation can be executed:\n\n``` default\nsudo pip3 install virtualenvwrapper\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}