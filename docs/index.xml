<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Delta-Science-Blog</title>
<link>https://gg-delta.github.io/Delta-Science-Blog/</link>
<atom:link href="https://gg-delta.github.io/Delta-Science-Blog/index.xml" rel="self" type="application/rss+xml"/>
<description>Time saving solutions in data science, programming and reproducable research</description>
<generator>quarto-1.4.555</generator>
<lastBuildDate>Tue, 23 May 2023 23:00:00 GMT</lastBuildDate>
<item>
  <title>A Shortcut To Deep SQL Coding</title>
  <dc:creator>GG Supp</dc:creator>
  <link>https://gg-delta.github.io/Delta-Science-Blog/posts/post-three/</link>
  <description><![CDATA[ 




<section id="summary" class="level1">
<h1>Summary</h1>
<p>SQL coding is an important part of data engineering, but mastering it can be a difficult and lengthy process. However, existing knowledge from other programming languages like Python or R can help bridge the gap to SQL. This post describes the exemplary usage of a handy translation tool that enables users to generate SQL code based on familiar commands in R (by using two packages from the mighty <a href="https://www.tidyverse.org/" title="The tidyverse is a collection of R packages built for data science."><em>tidyverse</em></a>).</p>
<hr>
<blockquote class="blockquote">
<p>This post is in appreciation of Hengji from <a href="https://dataengineercamp.com/">DBC</a> for all the great SQL mentoring he has provided.</p>
</blockquote>
</section>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>SQL coding is essential for many data engineering applications or services, especially when working with modern data warehouses like Snowflake and Databricks, as well as for data modelling in dbt.</p>
<p>Clearly not everybody can be considered “native” in SQL and mastering it from scratch can be daunting and time-consuming. Yet what if our existing knowledge could actually help us learn a new language?</p>
<p>Since many data professionals have already cultivated programming skills in languages like Python, R, Octave, Julia, etc. I was always wandering how the knowledge of one coding language might support the acquisition of another one.</p>
<p>One might be tempted to assume that the knowledge of one programming language might make it harder to learn a different one. The variations in syntax, function names, data types, and so on can quickly lead to confusion and make the learning process more challenging.</p>
<p>However, what if we can use translations tools in order to make the switch to SQL easier and progressive? Using translation tools, we can start to learn in a step-by-step approach, making it easier not only to get started but also to go deeper into SQL.</p>
<p>In the current post I will showcase a powerful translation tool that generates SQL code based on R commands by using the R packages <a href="https://dplyr.tidyverse.org/" title="This R package provides a consistent grammar of data manipulation"><em>dplyr</em></a> <em>and</em> <a href="https://github.com/tidyverse/dbplyr" title="This R package provides the operations of dplyr for databases"><em>dbplyr</em></a> both from the popular <em>tidyverse</em> collection. The examples provided here below assume some background in R and data manipulation using dplyr (if you would like to get a head start, you could check out this helpful <a href="https://dplyr.tidyverse.org/articles/dplyr.html">tutorial for dplyr</a> which includes many illustrative code snippets).</p>
</section>
<section id="setup" class="level1">
<h1>Setup</h1>
<p>The setup we need is nothing more than having a current R version and an IDE installed on your computer. I am using RStudio together with the R version 4.3.0 (actually, the IDE is optional). In addition, in case you want to test your SQL code that we will generate together, you should have a place to run your SQL code (e.g.&nbsp;by having a local Postgres database tool such as <a href="https://www.pgadmin.org/">pgAdmin4</a> or a data warehouse in the cloud that allows SQL queries such as <a href="https://www.snowflake.com/">Snowflake</a>). Thanks to <a href="https://dataengineercamp.com/">DBC</a> I have a trail version of Snowflake that I will use.</p>
</section>
<section id="demo-data" class="level1">
<h1>Demo Data</h1>
<p>As our toy data we will use a subset of weather API requests that were collected in the course of a data engineering project. The data contain atmospheric pressure and temperature records for three seperate locations, each about 25 km apart from another.</p>
<p>Let’s load the demo data within R. To load the data in your R console we just need to read this linked <a href="https://github.com/GG-Delta/Delta-Science-Blog/blob/2ea1efb943a463da5d3bb115a567fd645604b7ef/posts/post-three/d_demo.csv" title="Demo data in CSV format">CSV file</a> (download and save it to the location of your choosing). Note that we also need to include several R packages using the command <code>library(XXX)</code> in our session first. In case you don’t have installed them in your system, you need to do this in advance - either within your IDE or using the console command <code>install.packages("XXX")</code>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load Required Packages ####</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reading files</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dealing with date/time</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dbplyr)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sql support </span></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sql support</span></span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(RSQLite)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sql support</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load Demo Data ####</span></span>
<span id="cb1-9">src_file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./data/d_demo.csv"</span></span>
<span id="cb1-10">d_source <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(src_file, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Quick Data Overview</span></span>
<span id="cb1-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(d_source)</span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rows: 6,912</span></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Columns: 8</span></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># $ ID_LOC          &lt;chr&gt; "id2", "id2", "id2", "id2", "id2", "id2", …</span></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># $ TIME_ZONE       &lt;chr&gt; "GMT", "GMT", "GMT", "GMT", "GMT", "GMT", …</span></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># $ TIMESTAMP       &lt;dttm&gt; 2023-04-23 03:39:13, 2023-04-23 03:39:13, …</span></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># $ TIMESTAMP_UNIX  &lt;dbl&gt; 1.682221e+12, 1.682221e+12, 1.682221e+12, …</span></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># $ TIME            &lt;dttm&gt; 2023-04-22 00:00:00, 2023-04-22 04:00:00, …</span></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># $ PRESSURE_MSL    &lt;dbl&gt; 1015.4, 1014.2, 1015.6, 1015.6, 1015.4, …</span></span>
<span id="cb1-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># $ TEMPERATURE_2M  &lt;dbl&gt; 18.9, 17.7, 22.3, 20.5, 15.7, 17.6, 23.7, …</span></span>
<span id="cb1-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># $ TEMPERATURE_80M &lt;dbl&gt; 18.6, 19.8, 19.5, 20.0, 19.8, 20.4, 21.2, …</span></span></code></pre></div>
<p>From the display of the sample information, there are around 6900 records listed across 8 columns. Additionally, there is a TIMESTAMP field that indicates when the API query was run, and an ID_LOC field displaying the location identifier for which weather details were obtained (three places in total: id1, id2, id3).</p>
</section>
<section id="first-sql-translation" class="level1">
<h1>First SQL Translation</h1>
<p>To get a better undertstanding of the data, let’s ask some questions regarding the scope of the demo data: How often was the API request run for each location and how many days are present in the TIMESTAMP column?</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">d_source <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(TIMESTAMP, ID_LOC) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop =</span> n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(n)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(ID_LOC, TIMESTAMP) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb2-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># restricting the output to the first 12 rows</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A tibble: 36 × 4</span></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   TIMESTAMP           ID_LOC     n   prop</span></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#    &lt;dttm&gt;              &lt;chr&gt;  &lt;int&gt;  &lt;dbl&gt;</span></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  1 2023-04-23 05:57:35 id1      192 0.0278</span></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  2 2023-04-23 11:57:35 id1      192 0.0278</span></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  3 2023-04-23 17:57:35 id1      192 0.0278</span></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  4 2023-04-23 23:57:36 id1      192 0.0278</span></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  5 2023-04-24 05:57:36 id1      192 0.0278</span></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  6 2023-04-24 11:57:36 id1      192 0.0278</span></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  7 2023-04-24 17:57:36 id1      192 0.0278</span></span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  8 2023-04-24 23:57:36 id1      192 0.0278</span></span>
<span id="cb2-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  9 2023-04-25 05:57:37 id1      192 0.0278</span></span>
<span id="cb2-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 10 2023-04-25 11:57:37 id1      192 0.0278</span></span>
<span id="cb2-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 11 2023-04-25 17:57:37 id1      192 0.0278</span></span>
<span id="cb2-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 12 2023-04-25 23:57:37 id1      192 0.0278</span></span>
<span id="cb2-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # ℹ 24 more rows</span></span></code></pre></div>
<p>That is, the demo data contain 3 days of API requests, 4 requests per day for each location, making in total 3 x 4 x 3 = 36 individual timestamps (API requests).</p>
<p>How can we get this exact timestamp-based summary translated to a proper SQL command? That’s quite easy: we just need to add two additional commands to the basic R code shown before, <code>memdb_frame()</code> at the beginning and <code>show_query()</code> at the end:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">memdb_frame</span>(d_source) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(TIMESTAMP, ID_LOC) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop =</span> n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(n)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb3-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(ID_LOC, TIMESTAMP) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb3-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_query</span>()</span>
<span id="cb3-6"> </span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &lt;SQL&gt;</span></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SELECT *, `n` / SUM(`n`) OVER () AS `prop`</span></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># FROM (</span></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   SELECT `TIMESTAMP`, `ID_LOC`, COUNT(*) AS `n`</span></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   FROM `dbplyr_003`</span></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   GROUP BY `TIMESTAMP`, `ID_LOC`</span></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># )</span></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ORDER BY `ID_LOC`, `TIMESTAMP`</span></span></code></pre></div>
<p>We can utilize this SQL code in Snowflake, omitting the quotation marks. Remember to substitute the dataframe name with the actual table name, i.e.&nbsp;D_SOURCE.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>, n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUM</span>(n) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">OVER</span> () <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> prop</span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> (</span>
<span id="cb4-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span>, ID_LOC, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COUNT</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> n</span>
<span id="cb4-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> D_SOURCE</span>
<span id="cb4-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">GROUP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">BY</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span>, ID_LOC</span>
<span id="cb4-6">)</span>
<span id="cb4-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">BY</span> ID_LOC, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span></span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://gg-delta.github.io/Delta-Science-Blog/posts/post-three/screenshot_snowflake1.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Snowflake: Worksheet with results</figcaption><p></p>
</figure>
</div>
<p>Nice, right? We made our first translation into SQL. If you know SQL already a bit, you will know about Common Table Expressions (<a href="https://docs.getdbt.com/terms/cte">CTEs</a>). We can rephrase the code from the translation by using a CTE (please click the callout box below, if you are interested).</p>
<div class="callout-tip callout callout-style-default no-icon callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Going (a bit) pro: Using a CTE
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The output from show_query() can be refined by restructuring the SQL statement to include a CTE (Common Table Expression) in the beginning instead of using a nested structure in the middle of the code. It seems to be a widely shared opinion that programming SQL in this manner makes it easier to interpret for humans.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">WITH</span> tmp_cte <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> (</span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span>, ID_LOC, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COUNT</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> n</span>
<span id="cb5-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> D_SOURCE</span>
<span id="cb5-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">GROUP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">BY</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span>, ID_LOC</span>
<span id="cb5-5">)</span>
<span id="cb5-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>, n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUM</span>(n) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">OVER</span> () <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> prop</span>
<span id="cb5-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> tmp_cte</span>
<span id="cb5-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">BY</span> ID_LOC, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span>  </span></code></pre></div>
<p>However, needless to say, both approaches work fine (producing identical results).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://gg-delta.github.io/Delta-Science-Blog/posts/post-three/screenshot_snowflake2.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Snowflake: Worksheet with results (using CTE)</figcaption><p></p>
</figure>
</div>
</div>
</div>
</div>
<p>In case you are interested why we need to apply <code>memdb_frame()</code> to our data frame containing our data: this function creates an actual table (instead of a data frame) in a temporary in-memory database (see the <a href="https://dbplyr.tidyverse.org/reference/memdb_frame.html">documentation</a> for more details).</p>
</section>
<section id="second-sql-translation" class="level1">
<h1>Second SQL Translation</h1>
<p>Based on our timestamp-based summary seen before it seems that there is considerable redundancy in the demo data. Let’s only keep for each day the data from a single API call collected for each location (n=3), so that we end up with 3 x 3 = 9 individual TIMESTAMPS. Currently, we have 4 API calls per day, but we only want to keep the latest one for a given day.</p>
<p>How should we do that? By following these steps:</p>
<ul>
<li><p>Creating a new column containing the day of a given timestamp (named TIMESTAMP_DAY)</p></li>
<li><p>Group the data based on two attributes: location and day of the timestamp (ID_LOC and TIMESTAMP_DAY)</p></li>
<li><p>Selecting the latest/highest (maximum) timestamp from the grouped data</p></li>
</ul>
<p>The following R code can be used to implement and confirm the results of these operations (1 API call per location and day):</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">d_work1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb6-2">  d_source <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">TIMESTAMP_DAY =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span>(TIMESTAMP)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(ID_LOC, TIMESTAMP_DAY) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb6-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_max</span>(TIMESTAMP, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb6-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>()</span>
<span id="cb6-7"></span>
<span id="cb6-8">d_work1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb6-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(TIMESTAMP, ID_LOC) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb6-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop =</span> n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(n)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb6-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(ID_LOC, TIMESTAMP)</span>
<span id="cb6-12"></span>
<span id="cb6-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # A tibble: 9 × 4</span></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   TIMESTAMP           ID_LOC     n  prop</span></span>
<span id="cb6-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   &lt;dttm&gt;              &lt;chr&gt;  &lt;int&gt; &lt;dbl&gt;</span></span>
<span id="cb6-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1 2023-04-23 23:57:36 id1      192 0.111</span></span>
<span id="cb6-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2 2023-04-24 23:57:36 id1      192 0.111</span></span>
<span id="cb6-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3 2023-04-25 23:57:37 id1      192 0.111</span></span>
<span id="cb6-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4 2023-04-23 21:39:14 id2      192 0.111</span></span>
<span id="cb6-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 5 2023-04-24 21:00:18 id2      192 0.111</span></span>
<span id="cb6-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 6 2023-04-25 21:00:19 id2      192 0.111</span></span>
<span id="cb6-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 7 2023-04-23 21:42:50 id3      192 0.111</span></span>
<span id="cb6-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 8 2023-04-24 21:42:51 id3      192 0.111</span></span>
<span id="cb6-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 9 2023-04-25 21:42:52 id3      192 0.111</span></span></code></pre></div>
<p>Again, let’s translate this R code of the data transformation into SQL by including <code>memdb_frame()</code> at the beginning and <code>show_query()</code> at the end of the code:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">memdb_frame</span>(d_source) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">TIMESTAMP_DAY =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span>(TIMESTAMP)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(ID_LOC, TIMESTAMP_DAY) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_max</span>(TIMESTAMP, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb7-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb7-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_query</span>()</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &lt;SQL&gt;</span></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SELECT</span></span>
<span id="cb7-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   `ID_LOC`,</span></span>
<span id="cb7-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   `TIME_ZONE`,</span></span>
<span id="cb7-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   `TIMESTAMP`,</span></span>
<span id="cb7-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   `TIMESTAMP_UNIX`,</span></span>
<span id="cb7-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   `TIME`,</span></span>
<span id="cb7-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   `PRESSURE_MSL`,</span></span>
<span id="cb7-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   `TEMPERATURE_2M`,</span></span>
<span id="cb7-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   `TEMPERATURE_80M`,</span></span>
<span id="cb7-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   `TIMESTAMP_DAY`</span></span>
<span id="cb7-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># FROM (</span></span>
<span id="cb7-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   SELECT</span></span>
<span id="cb7-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     *,</span></span>
<span id="cb7-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     RANK() OVER (PARTITION BY `ID_LOC`, `TIMESTAMP_DAY` ORDER BY `TIMESTAMP` DESC) AS `q01`</span></span>
<span id="cb7-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   FROM (</span></span>
<span id="cb7-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     SELECT *, date(`TIMESTAMP`) AS `TIMESTAMP_DAY`</span></span>
<span id="cb7-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     FROM `dbplyr_004`</span></span>
<span id="cb7-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   )</span></span>
<span id="cb7-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># )</span></span>
<span id="cb7-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># WHERE (`q01` &lt;= 1)</span></span></code></pre></div>
<p>We can utilize this SQL code again in Snowflake, after omitting the quotation marks.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span></span>
<span id="cb8-2">  ID_LOC,</span>
<span id="cb8-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">TIME_ZONE</span>,</span>
<span id="cb8-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span>,</span>
<span id="cb8-5">  TIMESTAMP_UNIX,</span>
<span id="cb8-6">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIME</span>,</span>
<span id="cb8-7">  PRESSURE_MSL,</span>
<span id="cb8-8">  TEMPERATURE_2M,</span>
<span id="cb8-9">  TEMPERATURE_80M,</span>
<span id="cb8-10">  TIMESTAMP_DAY</span>
<span id="cb8-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> (</span>
<span id="cb8-12">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span></span>
<span id="cb8-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>,</span>
<span id="cb8-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">RANK</span>() <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">OVER</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">PARTITION</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">BY</span> ID_LOC, TIMESTAMP_DAY <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">BY</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">DESC</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> q01</span>
<span id="cb8-15">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> (</span>
<span id="cb8-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">date</span>(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> TIMESTAMP_DAY</span>
<span id="cb8-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> D_SOURCE</span>
<span id="cb8-18">  )</span>
<span id="cb8-19">)</span>
<span id="cb8-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHERE</span> (q01 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<p>As you can see in the SQL code this time we find a so called window function in our translation. In general, a <a href="https://flexiple.com/sql/sql-window-functions-cheat-sheet/">SQL window function</a> applies aggregate and ranking operation over a particular data window (i.e.&nbsp;a set of rows). I am refering to the code part starting with <code>RANK()</code> and ending with the <code>ORDER BY()</code> statement. You can read a nice and concise summary on this topic following the link above (or <a href="https://flexiple.com/sql/sql-window-functions-cheat-sheet/">here</a>).</p>
<div class="callout-tip callout callout-style-default no-icon callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
SQL rephrased: Again using a CTE
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>We can rephrase the SQL code from above by defining a CTE at the top and integrating the window function there:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">WITH</span> tmp_cte <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> (</span>
<span id="cb9-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span></span>
<span id="cb9-3">  ID_LOC,</span>
<span id="cb9-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">TIME_ZONE</span>,</span>
<span id="cb9-5">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span>,</span>
<span id="cb9-6">  TIMESTAMP_UNIX,</span>
<span id="cb9-7">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIME</span>,</span>
<span id="cb9-8">  PRESSURE_MSL,</span>
<span id="cb9-9">  TEMPERATURE_2M,</span>
<span id="cb9-10">  TEMPERATURE_80M,</span>
<span id="cb9-11">  TIMESTAMP_DAY,</span>
<span id="cb9-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">RANK</span>() <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">OVER</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">PARTITION</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">BY</span> ID_LOC, TIMESTAMP_DAY <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">BY</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">DESC</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> q01</span>
<span id="cb9-13">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> (</span>
<span id="cb9-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">date</span>(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> TIMESTAMP_DAY</span>
<span id="cb9-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> D_SOURCE</span>
<span id="cb9-16">  )</span>
<span id="cb9-17">)</span>
<span id="cb9-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span></span>
<span id="cb9-19"> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb9-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> tmp_cte </span>
<span id="cb9-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHERE</span> (q01 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<p>Let’s run the rephrased code in Snowflake providing the same results as before.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://gg-delta.github.io/Delta-Science-Blog/posts/post-three/screenshot_snowflake3.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Snowflake: Worksheet with results</figcaption><p></p>
</figure>
</div>
</div>
</div>
</div>
<p>I am hoping that these two examples have been interesting enough to get you started on your own exploration and the illustrated translation tool may be a useful resource for your learning journey.</p>
<p>Happy coding &amp; Cheers! 😃</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
PS: How do I upload a local data file into Snowflake?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>In case you would like to replicate some of the SQL code directly in Snowflake, you would need to upload your local data file and make it available as a table. Please find the <a href="https://github.com/GG-Delta/Delta-Science-Blog/blob/2ea1efb943a463da5d3bb115a567fd645604b7ef/posts/post-three/d_demo.parquet">demo data as parquet file</a> in the link (download the file and save it on your local machine).</p>
<p>Now, uploading this data file to Snowflake can be done in two simple steps:</p>
<ol type="1">
<li>Create the destination table: this table is empty at the moment of creation, but for creating the table you need to define the data schema, i.e.&nbsp;column names and data types (see the details below).</li>
<li>Within the Snowflake UI go to the database section and select a specific table, namely the one that was just created created: click on the “Load Data” button and select the previously dowloaded parquet-file containing the demo data.</li>
</ol>
<section id="step-1" class="level4">
<h4 class="anchored" data-anchor-id="step-1">Step 1</h4>
<p>When creating the table in Snowflake we need to define the column definitions, i.e.&nbsp;providing a name for each column and the data type specification of each column. The column definitions are separated by commas. For our concrete example the destination table (named D_SOURCE) with its 8 columns is created in Snowflake as follows:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">CREATE</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">TABLE</span> D_SOURCE(</span>
<span id="cb10-2">ID_LOC <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">VARCHAR</span>,</span>
<span id="cb10-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">TIME_ZONE</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">VARCHAR</span>, </span>
<span id="cb10-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span> TIMESTAMP_NTZ(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>),</span>
<span id="cb10-5">TIMESTAMP_UNIX <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">NUMBER</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">38</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb10-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIME</span> TIMESTAMP_NTZ(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>),</span>
<span id="cb10-7">PRESSURE_MSL <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">FLOAT</span>,</span>
<span id="cb10-8">TEMPERATURE_2M <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">FLOAT</span>,</span>
<span id="cb10-9">TEMPERATURE_80M <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">FLOAT</span></span>
<span id="cb10-10">)</span></code></pre></div>
</section>
<section id="step-2" class="level4">
<h4 class="anchored" data-anchor-id="step-2">Step 2</h4>
<p>Within the Snowflake UI navigate to the database section and select the database and the schema that contains the previously created destination table (in our example: D_SOURCE). When you have selected this table, you will see blue action button on the top right corner named “Load Data” (see the screenshot below)</p>
<p><img src="https://gg-delta.github.io/Delta-Science-Blog/posts/post-three/screenshot_snowflake4.png" class="img-fluid" alt="Snowflake UI: Load Data">Next you are prompted to browse and select the local file that you want to upload. Find the previously downloaded file <code>demo_file.parquet</code> and click “Next”.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://gg-delta.github.io/Delta-Science-Blog/posts/post-three/screenshot_snowflake5.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Snowflake UI: Select parquet file</figcaption><p></p>
</figure>
</div>
<p>Finally, select the right file format “Parquet” and finish the upload process.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://gg-delta.github.io/Delta-Science-Blog/posts/post-three/screenshot_snowflake6.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Snowflake UI: Select file format</figcaption><p></p>
</figure>
</div>
<p>Your efforts should be reworded by the following “success” feedback. That is, you are good to go using the data uploaded into the destination table. 🙌</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://gg-delta.github.io/Delta-Science-Blog/posts/post-three/screenshot_snowflake7.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Snowflake UI: Upload succeeded</figcaption><p></p>
</figure>
</div>
</section>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>sql</category>
  <category>r</category>
  <category>snowflake</category>
  <category>productivity</category>
  <guid>https://gg-delta.github.io/Delta-Science-Blog/posts/post-three/</guid>
  <pubDate>Tue, 23 May 2023 23:00:00 GMT</pubDate>
  <media:content url="https://gg-delta.github.io/Delta-Science-Blog/posts/post-three/pexels-boom-12585934.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Using Jupyter Notebook in virtual environments in a free source-code editor (VSCodium/VS Code)</title>
  <dc:creator>GG Supp</dc:creator>
  <link>https://gg-delta.github.io/Delta-Science-Blog/posts/post-two/</link>
  <description><![CDATA[ 




<section id="summary" class="level1">
<h1>Summary</h1>
<p>Working on data-science projects often requires to present, showcase and explain interactive source-code and data visualization within a single document. <em>Jupyter Notebook</em> is a tool providing exactly that. In the following lines I will briefly lead you through an exemplary setup that combines <em>Jupyter Notebook</em> running in a specified virtual environment with the fully open-source editor <em>VSCodium</em> (free alternative to <em>VS Code</em>). Following these lines should lead you to a productive setup where you can document your data-science projects in the form of a <em>Jupyter Notebook</em>, while editing its content via the extremely capable <em>VSCodium</em> editor.</p>
<p>Before you proceed, please ensure that both of the following conditions are met:</p>
<ol type="1">
<li>Your computer has a version of Python 3 installed, and</li>
<li>Your computer is prepared to initialize and run a virtual environment</li>
</ol>
<p>If you need assistance or a refresher on these topics you can take a look here: <a href="https://gg-delta.github.io/Delta-Science-Blog/posts/post-one/">Blog-Post-01</a>.</p>
<p>I wrote this summary using macOS (version: 12.6), but you should be able to follow equivalent steps on Linux or Windows (you might need to make some modifications).</p>
<hr>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p>We’ll go through five main steps. The list below provides a high-level overview. Each of the five main steps will be explained in detail in the next section (see Details):</p>
<ol type="1">
<li>Install and setup <em>VSCodium</em> (i.e.&nbsp;get and enable some extensions)</li>
<li>Activate an existing virtual environment (with its underlying Python/pip version) which you want to use for running your <em>Jupyter Notebook</em> document. Then, within this activated virtual environment install two required packages:
<ul>
<li><em>ipykernel</em></li>
<li><em>jupyter</em></li>
</ul></li>
<li>Install any additional Python packages (within the same activated virtual environment) that you intend to use for your data science project and that must be available for your new <em>Jupyter Notebook</em> document (to be created at a later step)</li>
<li>Create a new ipykernel that will serve as the basis for the upcoming <em>Jupyter Notebook</em> document</li>
<li>Finally, just initialize a brand-new Jupyter Notebook document and open it with your <em>VSCodium</em> editor (after selecting the right kernel within the editor, you are ready to start using the document).</li>
</ol>
<hr>
</section>
<section id="details" class="level1">
<h1>Details</h1>
<section id="install-and-setup-vscodium" class="level2">
<h2 class="anchored" data-anchor-id="install-and-setup-vscodium">1. Install and setup <em>VSCodium</em></h2>
<p>As a first step you should download and install (in case you don’t have it) the fully open-source editor <a href="https://vscodium.com"><em>VSCodium</em></a> which is known as the free alternative for the popular <em>VS Code</em> editor of Microsoft. Please follow one of the following options:</p>
<div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Install via brew</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Install via .dmg</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<p>In case you have followed the steps in my earlier post (<a href="https://gg-delta.github.io/Delta-Science-Blog/posts/post-one/">Blog-Post-01</a>), you will have <a href="https://brew.sh/">homebrew</a> already installed on your computer. If not, please consider to get homebrew: it is a very useful and straightforward package manager (for macOS/Linux).</p>
<p>Now, assuming your computer has homebrew installed, please open a terminal window (you can do this by opening macOS spotlight - or via your keyboard: just hit both keys <em><code>command</code></em> + <em><code>space</code></em> at once - then type “terminal” and open this application).</p>
<p>In your open terminal window enter and execute the following command to install the <em>VSCodium</em> editor:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb1-1">brew install --cask vscodium</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<p>A list of the most recent VSCodium releases in various formats can be found <a href="https://github.com/VSCodium/vscodium/releases">here</a>. Open this link and scroll down to the .dmg file section and download the appropriate file matching your computer’s architecture (note the respective suffix of the listed file names: .<em>arm64.</em> should used for newer Macs built on Apple Silicon, while .x64. for all Intel Macs).</p>
<p>After downloading the .dmg file, double-click the file to open it, and you’ll see a Finder window. Simply drag the <em>VSCodium</em> icon into the Applications folder and you are done with the installation.</p>
</div>
</div>
</div>
<p>To prepare the editor for <em>Jupyter Notebook</em> we just need to install and enable the following extension: just navigate to the left vertical menu column of <em>VSCodium</em> and open the section called “Extensions” (keyboard shortcut: <em><code>shift</code></em> + <em><code>command</code></em> + <em><code>X</code></em>). You can see the arrow in the color highlighted screenshot below.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://gg-delta.github.io/Delta-Science-Blog/posts/post-two/screenshot_editor_extensions.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">VSCodium: Select and open the extension section</figcaption><p></p>
</figure>
</div>
<p>Within the extensions window of VSCodium you will see a search mask (top left corner): enter there the word “Jupyter” and search in the resulting list for the extension option called “Jupyter Extension for Visual Studio Code” that is published by <em>ms-toolsai</em>. Click on the installation button displayed next to it. After the installation you should see the updated status of this extension reflected by both buttons “disable” and “uninstall” - see the screenshot below:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://gg-delta.github.io/Delta-Science-Blog/posts/post-two/screenshot_editor_installed.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">VSCodium: Extensions window</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default no-icon callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Smart move: Include Python extension
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Since you are already in the right place it will not hurt (quite the contrary) to include another extension, namely “Python” published by <em>ms-python</em>. This extension (its complete title is “Python extension for Visual Studio Code”) provides extensive language support for Python with code editing features such as code completion, parameter info, quick info etc.</p>
<p><img src="https://gg-delta.github.io/Delta-Science-Blog/posts/post-two/screenshot_additional_extension.png" class="img-fluid" alt="VSChronium: Python Extension"><br>
</p>
</div>
</div>
</div>
</section>
<section id="activate-an-existing-virtual-environment-and-install-two-fundamental-python-packages" class="level2">
<h2 class="anchored" data-anchor-id="activate-an-existing-virtual-environment-and-install-two-fundamental-python-packages">2. Activate an existing virtual environment and install two fundamental Python packages</h2>
<p>To manage virtual environments I am using the extremely useful tool <em>virtualenvwrapper</em>. In an earlier post I explained the use of virtual environments together with a detailed instruction of their setup and management (please see <a href="https://gg-delta.github.io/Delta-Science-Blog/posts/post-one/">here</a>).</p>
<p>Using the <code>workon</code> command from <em>virtualenvwrapper</em> without any additional expressions enlists all virtual environments that are currently available on your computer. In our exemplary case provides the terminal window provides the following output (listing three already created virtual environments):</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb2-1">myusername@mbp ~ % workon</span>
<span id="cb2-2">myenv_dwork01</span>
<span id="cb2-3">myenv_dwork02</span>
<span id="cb2-4">myenv_test1</span></code></pre></div>
<p>To activate one specific virtual environment we just need to use the <code>workon</code> command from <em>virtualenvwrapper</em> together with the name of the virtual environment (for our example let’s choose <em>myenv_dwork2</em>):</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb3-1">myusername@mbp ~ % workon myenv_dwork02</span></code></pre></div>
<p>After having activated the selected virtual environment successfully you will note that the prompt of your terminal window has changed to this format: The activated virtual environment is explicitly stated within the round brackets:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb4-1">(myenv_dwork02) myusername@mbp ~ %</span></code></pre></div>
<p>Now we can proceed with installing the two required packages in this virtual environment using the pip command. Please execute the following command in your terminal window (the feedback from the terminal will tell you when the installation was concluded):</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb5-1">pip install ipykernel jupyter</span></code></pre></div>
</section>
<section id="install-any-additional-python-packages-within-the-same-activated-virtual-environment" class="level2">
<h2 class="anchored" data-anchor-id="install-any-additional-python-packages-within-the-same-activated-virtual-environment">3. Install any additional Python packages (within the same activated virtual environment)</h2>
<p>Keeping the same virtual environment activated (in our example case: <em>myenv_dwork02</em>) we can proceed with installing those packages that we intend to use later for our data project (within the <em>Jupyter Notebook</em> document).</p>
<p>Let’s assume we know to use two very popular Python packages for data analysis (<em>pandas</em>) and data visualization (<em>seaborn</em>). We can install both packages by calling the following command (please add/modify the package names according to your needs) in your terminal window:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb6-1">pip install -U pandas seaborn</span></code></pre></div>
<p>One additional detail: The flag <code>-U</code>/<code>--upgrade</code> with the <code>pip install</code> command used above means to upgrade the specified packages to their latest version.</p>
</section>
<section id="create-a-new-ipykernel-and-give-it-a-name" class="level2">
<h2 class="anchored" data-anchor-id="create-a-new-ipykernel-and-give-it-a-name">4. Create a new ipykernel and give it a name</h2>
<p>To create and name the new ipykernel run the Python command shown below in your terminal window. You should give the new ipykernel a name: in our example I will call it <em>myenv_dwork02_kernel</em> (to underline the connection of the kernel with the virtual environment). Feel free to choose a name that suits your preferences:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb7-1">python -m ipykernel install --name=myenv_dwork02_kernel</span></code></pre></div>
</section>
<section id="create-a-new-jupyter-notebook-document-and-open-it-with-your-vscodium-editor" class="level2">
<h2 class="anchored" data-anchor-id="create-a-new-jupyter-notebook-document-and-open-it-with-your-vscodium-editor">5. Create a new <em>Jupyter Notebook</em> document and open it with your <em>VSCodium</em> editor</h2>
<p>We managed to reach the very last step of our setup. To that end we just need to create a fresh (empty) <em>Jupyter Notebook</em> document (having the file extension <code>.ipynb</code>) and open this file in our VSCodium editor.</p>
<p>Before creating the new <code>.ipynb</code> file we should decide where we want to create this file: it seems to be conveniant practice to establish a dedicated folder for a given data project. Therefore, I will create such a folder (to be named <em>dwork02</em>) within my home directory by executing the following lines in the terminal window:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb8-1">mkdir  ~/dwork02 </span></code></pre></div>
<p>By calling the <code>touch</code> command we will now create the <code>.ipynb</code> file (to be named <em>new_noteb</em>) in the project folder we have just created:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb9-1">touch ~/dwork02/new_noteb.ipynb</span></code></pre></div>
<div class="callout-tip callout callout-style-default no-icon callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Some nice shortcuts
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>You can create the folder and the .<code>ipynb</code> file also in just one single line as follows:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb10-1">mkdir  ~/dwork02 &amp;&amp; touch ~/dwork02/new_noteb.ipynb</span></code></pre></div>
<p>In case you want to establish a new directory together with its full directory structure, you can call <code>mkdir</code> together with the flag <code>-p</code>/<code>--parents</code> (this option will make sure that directories are created where needed - in case a given directory already exists no error will be triggered):</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb11-1">mkdir -p  ~/Coding/dwork02 &amp;&amp; touch ~/Coding/dwork02/new_noteb.ipynb</span></code></pre></div>
</div>
</div>
</div>
<p>After having created the fresh <em>Jupyter Notebook</em> file we should open it now from within the <em>VSCodium</em> editor. To do so, start the VSCodium application, select from the main top-bar menu the section <em>File</em> and choose <em>Open</em> (see the screenshot below).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://gg-delta.github.io/Delta-Science-Blog/posts/post-two/screenshot_open_file.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">VSCodium: Open the created .ipynb file</figcaption><p></p>
</figure>
</div>
<p>Browse to the location, where you just have created the new <code>.ipynb</code> file (in our example this is the <em>dwork_02</em> directory) and open this file. Now, when the notebook opens up in your editor, click on the kernel picker located in the top right corner (see the arrow and marked highlight below):</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://gg-delta.github.io/Delta-Science-Blog/posts/post-two/screenshot_kernel_button.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">VSCodium: Location of the kernel picker (button)</figcaption><p></p>
</figure>
</div>
<p>After clicking the kernel picker you will see a list of possible kernels to choose from (see the screenshot with the marked highlights below). Following our example case we will select the kernel named <code>myenv_dwork02_kernel</code> (or whatever you have named your kernel before).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://gg-delta.github.io/Delta-Science-Blog/posts/post-two/screenshot_kernel_list.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">VSCodium: List of available kernels</figcaption><p></p>
</figure>
</div>
<p>If you don’t see your previously created kernel in the kernel list, close <em>VSCodium</em> completely and re-open it. It should now appear in the refreshed list as shown above.</p>
<p>When you have your brand-new Jupyter Notebook document open in <em>VSCodium</em> and your selected kernel is running (as indicated by the kernel picker in the top right corner: please see the highlighted screenshot below) you have made it! Congratulations!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://gg-delta.github.io/Delta-Science-Blog/posts/post-two/screenshot_kernel_final.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">VSCodium: Selected kernel running in new Jupyter notebook file</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default no-icon callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
How to add a new Python package to the current Jupyter kernel?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Imagine that you have not included all python packages that you need to use in your Jupyter notebook at the time when you initialized its setup (see step 3). Don’t worry! You can still do it within your running Jupyter notebook.</p>
<p>For a concrete example let’s say we want to include the great machine learning package <em>yellowbrick</em> to our current kernel: just add a new code cell in your Jupyter notebook, then paste and run the following code in this cell of the notebook:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb12-1">import sys</span>
<span id="cb12-2">!{sys.executable} -m pip install yellowbrick</span></code></pre></div>
</div>
</div>
</div>
<p>Happy coding &amp; Cheers! 😃</p>


</section>
</section>

 ]]></description>
  <category>python</category>
  <category>productivity</category>
  <category>setup</category>
  <guid>https://gg-delta.github.io/Delta-Science-Blog/posts/post-two/</guid>
  <pubDate>Wed, 23 Nov 2022 00:00:00 GMT</pubDate>
  <media:content url="https://gg-delta.github.io/Delta-Science-Blog/posts/post-two/pexels-tuur-tisseghem-159333.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Save time &amp; nerves: start controlling different Python versions (pyenv) and managing virtual environments (virtualenvwrapper)</title>
  <dc:creator>GG Supp</dc:creator>
  <link>https://gg-delta.github.io/Delta-Science-Blog/posts/post-one/</link>
  <description><![CDATA[ 




<section id="summary" class="level1">
<h1>Summary</h1>
<p>Most people’s computers have multiple Python versions installed (macOS comes with Python pre-installed, often termed system Python). Keeping these versions (the pre-installed system Python version and other user-installed Python versions) separate and controlling them independently (e.g.&nbsp;installing or updating a given Python package for a specific Python version only) requires an upfront solution.</p>
<p>Working with virtual environments, i.e.&nbsp;having a separate workspace for each individual project, necessitates actively defining the Python version that will be used to create a specific virtual environment. Controlling Python versions is thus linked to the task of managing virtual environments. All packages installed in a specific virtual environment will not conflict with other virtual environments (all packages being contained in that particular workspace).</p>
<p>Following the steps outlined here below, your computer should be in a state where different Python versions coexist peacefully and where you can safely install, upgrade, or remove libraries without affecting other projects. In fact, a working setup that is simple to maintain.</p>
</section>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>A certainty, especially in the world of programming, is that there are numerous paths to the same destination. As a result, there is a plethora of advice available on how to arrive at a working (and hopefully maintainable) setup of a local computer to do data science using Python.</p>
<p>Speaking from personal experience, I was always too busy doing the actual work to contemplate about the “ideal” setup, so I decided for the moment to ignore any best practices that might exist somewhere. Besides, given the vast amount of information available, determining the right blueprint to follow is not an easy task (just considering the combinatorial nightmare of different operating systems, python versions, installed or assumed pre-installed software, various IDEs etc etc). In short, there are many flying pieces and thus many degrees of freedom, which inevitably leads to complexity.</p>
<p>However, sooner or later the day always comes when you can’t afford to ignore the Python setup issue any longer simply because something broke (e.g.&nbsp;after installing a new Python package or upgrading an installed one). From that moment on you will be busy finding a way to continue your work. Sometimes a quick fix is possible (after consulting numerous entries at Stack Overflow or similar websites), but sometimes band-aid is not enough, so that you need a fundamental solution.</p>
<p>In order to spare you time, research effort and hopefully some nerves I will concisely summarize all steps that resulted into my tested setup. Each step builds on different sources of advice that I will cite along the way (i.e.&nbsp;credits, attribution and thanks are given by explicit references).</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>I used the phrase “fundamental solution” above for a reason: in case you got totally lost with quick fixes that resulted in even more problems later on a fresh installation of the operating system is certainly a radical approach. However, it provides a clean start from where you can begin building your new robust setup that is maintainable for all your future projects. I wrote the following lines with a fresh installation of the operating system in mind.</p>
</div>
</div>
</div>
<p>I wrote this summary using macOS (version: 12.6), but you should be able to follow equivalent steps on Linux or Windows (you might need to make some modifications).</p>
<hr>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p>We’ll go through three main steps. The list below is intended to provide you with a high-level overview. Each of the three main steps will be explained in detail in the next sections (see Details):</p>
<ol type="1">
<li><p><strong>Install the</strong> <strong><em>homebrew</em></strong> <strong>package manager</strong> (macOS/Linux)<br>
(If you are not sure if you have please check and eventually update it: see details below)</p></li>
<li><p><strong>Install</strong> <strong><em>pyenv</em></strong> (using <em>homebrew</em>)</p>
<ol type="a">
<li><p>Running the installation command in the terminal</p></li>
<li><p>Configure your terminal (setup your .zsrh file for <em>pyenv</em>)</p></li>
<li><p>Using <em>pyenv</em> to install a new Python version (in addition to your system Python version)</p></li>
<li><p>Switching between different Python versions available/installed on your computer</p></li>
</ol></li>
</ol>
<div class="callout-tip callout callout-style-default no-icon callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
About: <em>pyenv</em>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The library <em>pyenv</em> is a wonderful tool that allows you to control and switch between all different Python versions installed on your computer. Each new Python version you install using pyenv will be neatly isolated from all other versions; this is equally and importantly true for the system Python version that comes pre-installed on macOS (located in <code>/usr/bin/python3</code>). In this way you can also make sure you don’t mess with this system Python version that is a constituting part of your operating system. That is, your computer depends on it. A great summary about <em>pyenv</em> can be found here [<a href="https://realpython.com/intro-to-pyenv/">*</a>].</p>
</div>
</div>
</div>
<ol start="3" type="1">
<li><p><strong>Install <em>virtualenvwrapper</em></strong> using your system Python version<br>
(and its associated <em>pip</em> version)</p>
<ol type="a">
<li><p>Running the installation command in the terminal</p></li>
<li><p>Configure your terminal to load the <em>virtualenvwrapper</em> commands</p></li>
<li><p>Setup a new virtual environment on the basis of a specific Python version</p></li>
</ol></li>
</ol>
<div class="callout-tip callout callout-style-default no-icon callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
About: <em>virtualenvwrapper</em>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The library <em>virtualenvwrapper</em> is extremely useful tool to create and manage (such as activating/deactivating) virtual environments? Why should we care about virtual environments? The main reason is that virtual environments represent independent, totally separate workspaces for individual projects: any package installed in a given workspace will not interfere with the ones installed in other workspaces. Thus, in this way you are able to install different versions of the same package for each of your projects. This would be impossible when all of your projects’ requirements (i.e.&nbsp;packages) were installed in the very same environment. Please find a fine and elaborate summary about this tool here [<a href="https://opensource.com/article/21/2/python-virtualenvwrapper">*</a>].</p>
</div>
</div>
</div>
<hr>
</section>
<section id="details" class="level1">
<h1>Details</h1>
<section id="install-the-homebrew-package-manager" class="level2">
<h2 class="anchored" data-anchor-id="install-the-homebrew-package-manager">1. Install the <em>homebrew</em> package manager</h2>
<p>As a first step you should install <a href="https://brew.sh/">homebrew</a> which is a very useful and straightforward package manager (for macOS/Linux). In order to enter the code below open a terminal window (you can do this by opening macOS spotlight - or via your keyboard: just hit both keys <em><code>command</code></em> + <em><code>space</code></em> at once - then type “terminal” and open this application).</p>
<p>Now that you have your terminal window open, you can enter the following commands shown below (select the commands matching your case):</p>
<div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Install homebrew</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Check homebrew (installed/version)</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">Update homebrew</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<p>To install <em>homebrew</em> on your computer: paste this command in your terminal window and hit <em>enter.</em> After hitting <em>enter</em> the script will explain what it will do and then pauses before it does it:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb1-1">/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<p>To verify and check whether you have <em>homebrew</em> already installed, you can enter the command shown below. In the case you have homebrew installed, the output will tell you which version it is. If you don’t have it installed yet, the output will tell you something like <code>command not found</code>.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb2-1">brew --version</span></code></pre></div>
<p>Example output in case your computer has <em>homebrew</em> already installed (your version might differ):</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb3-1">Homebrew 3.6.6 </span>
<span id="cb3-2">Homebrew/homebrew-core (git revision 7ec3c2d24e8; last commit 2022-10-24) </span>
<span id="cb3-3">Homebrew/homebrew-cask (git revision c3048a8013; last commit 2022-10-24)</span></code></pre></div>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<p>After having verified that your computer has <em>homebrew installed</em>, update it to make sure you have the latest version. Just enter the following command in your terminal window and hit enter [<a href="https://docs.brew.sh/FAQ">*</a>].</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb4-1">brew update</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="install-pyenv-via-homebrew" class="level2">
<h2 class="anchored" data-anchor-id="install-pyenv-via-homebrew">2. Install <em>pyenv</em> (via <em>homebrew</em>)</h2>
<p><strong>2a:</strong> Run the following installation command in the terminal [<a href="https://github.com/pyenv/pyenv#homebrew-in-macos">*</a>].</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb5-1">brew install pyenv</span></code></pre></div>
<p><strong>2b:</strong> Now you need to configure your terminal (or shell) in a way so that the <em>pyenv</em> commands will be loaded. You do this by editing the configuration file of your terminal represented by <code>.zshrc</code>, <code>.bashrc</code> or other file types (sometimes subsumed under the term “shell’s rc file”, the affix means “run commands”). Given that macOS default is based on the <code>zsh</code> Unix shell - also known as Z shell - we will focus to edit only this configuration file (for other options please see this manual: [<a href="https://github.com/pyenv/pyenv#set-up-your-shell-environment-for-pyenv">*</a>]). The configuration file for <code>zsh</code> is called <code>.zshrc</code> and is located in your home folder (<code>~/.zshrc</code>).</p>
<p>Before trying to edit a file we should make sure that the hidden <code>.zshrc</code> file is actually there:</p>
<div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Check <code>.zshrc</code> via Finder</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Check <code>.zshrc</code> via Terminal</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false">Create <code>.zshrc</code> file (if its not there)</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<p>To view the hidden <code>.zshrc</code> file in your home directory you can do the following within macOS Finder: Open Finder and navigate to your home directory (e.g, something like <code>/Users/MyUserName</code>): hit the following keys at once: <em><code>Command</code></em> + <em><code>Shift</code></em> +<em><code>.</code></em></p>
<p>By using this command you told Finder to display usually hidden files (i.e.&nbsp;files starting with a dot). If you see the <code>.zshrc</code> file within Finder you can open it by selecting any text editing application (e.g.&nbsp;TextEdit). In case there is no <code>.zshrc</code> file in your home directory, please create one: just see the instructions in this section (tab).</p>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<p>Open a terminal window (the hidden file should be located in your home folder: something like <code>/Users/MyUserName/</code>) and enter the following command:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb6-1">open ~/.zshrc</span></code></pre></div>
<p>In case this file doesn’t exist you will receive a respective feedback (“file doesn’t exist”). In case there is no such <code>.zshrc</code> file in your home directory, please create one: just see the instructions in this section (tab).</p>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<p>Within your terminal window enter the following command:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb7-1">touch ~/.zshrc</span></code></pre></div>
<p>The operation starting with <code>touch</code> will create the hidden <code>.zshrc</code> file in your home directory. You can verify the creation of this file by following one of the options shown in this section (see other tabs).</p>
</div>
</div>
</div>
<p>Since we made sure that the configuration file for our shell is indeed available (i.e., the <code>.zshrc</code> file) we can now add the following three expressions to this configuration file. To add these modifications to your shell’s configuration enter the following commands in your terminal:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb8-1">echo 'export PYENV_ROOT="$HOME/.pyenv"' &gt;&gt; ~/.zshrc</span>
<span id="cb8-2">echo 'command -v pyenv &gt;/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"' &gt;&gt; ~/.zshrc</span>
<span id="cb8-3">echo 'eval "$(pyenv init -)"' &gt;&gt; ~/.zshrc   </span></code></pre></div>
<p>After having executed these commands your <code>.zshrc</code> file will have three new lines included.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>You can verify the successful installation and setup of <em>pyenv</em> by entering the following command in your terminal window:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb9-1">pyenv</span></code></pre></div>
<p>If all went fine, you should receive the output of the actual version of <em>pyenv</em> installed. In my case the output is as follows:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb10-1">pyenv 2.3.5</span></code></pre></div>
<p>In addition, you should see a list of command options (e.g.&nbsp;“--version”, “commands”, “exec” and several more).</p>
<p>With <em>pyenv</em> installed successfully you can get a nice overview about all installed Python versions: just enter the following <em>pyenv</em> command:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb11-1">pyenv versions</span></code></pre></div>
<p>Since we haven’t yet installed any additional Python version, <em>pyenv</em> will show you the system Python version (pre-installed on our macOS): you will see something like this (exemplary output):</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb12-1">  * system (set by /Users/MyUserName/.pyenv/version)</span></code></pre></div>
<p>Given that no other version of Python is installed <em>pyenv</em> is enlisting the Python system version. The star * symbol marks the Python version set to be global, that is the Python version that serves as the default version of Python which macOS uses when running Python applications.</p>
<p>You can use the following command to confirm the location of the Python system version:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb13-1">pyenv which python3</span></code></pre></div>
<p>This will show the following output:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb14-1">/usr/bin/python3</span></code></pre></div>
<p>This shows the actual path to your system Python version.</p>
<p>You might be tempted to enter the traditional terminal command <code>which python3</code> to locate the Python’s location. However, this command will reveal only the <em>pyenv</em> path modifications inserted in your shell’s configuration. In fact you will see something like this: <code>/Users/MyUserName/.pyenv/shims/python3</code></p>
</div>
</div>
</div>
<p><strong>2c:</strong> We are now ready to <em>pyenv</em> in order to install a new Python version. In case you know the precise Python version you would like to install (for the sake of this example let’s say 3.10.5) simply execute the following <em>pyenv</em> command:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb15-1">pyenv install 3.10.5</span></code></pre></div>
<p>To verify which Python versions are installed and available on your computer just enter the following command we saw before:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb16-1">pyenv versions</span></code></pre></div>
<p>This time the output should look like along these lines:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb17-1">* system (set by /Users/ggs/.pyenv/version)</span>
<span id="cb17-2">  3.10.5</span></code></pre></div>
<p>The output provides a list of all installed Python versions, while the star * symbol marks the Python version set to be global (default).</p>
<div class="callout-tip callout callout-style-default no-icon callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Nice to know: Which Python versions are available to install?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>In case you would like to get a list of all Python versions that are available to be installed via <em>pyenv</em> you can use the following command (as a shortcut you can also type: <code>pyenv install -l)</code>:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb18-1">pyenv install --list</span></code></pre></div>
<p>This command will give you a list of available Python versions (and additionally showing other libraries we can ignore for the moment) such as:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb19-1">Available versions:</span>
<span id="cb19-2">  2.1.3</span>
<span id="cb19-3">  2.2.3</span>
<span id="cb19-4">  2.3.7</span>
<span id="cb19-5">...</span>
<span id="cb19-6">  3.10.5</span>
<span id="cb19-7">  3.10.6</span>
<span id="cb19-8">  3.10.7</span>
<span id="cb19-9">...</span></code></pre></div>
</div>
</div>
</div>
<p><strong>2d:</strong> For our current example we have seen two versions of Python installed on our computer. Using <em>pyenv</em> we can switch between these two Python versions, that is we can select one version and set it the global default: this global Python version will become the one macOS uses when running Python applications. Set a given Python version to global by executing the following command:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb20-1">pyenv global 3.10.5</span></code></pre></div>
<p>When running the previously shown command <code>pyenv versions</code> again we will see that the Python version marked to be global has changed accordingly (exemplary output):</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb21-1">system</span>
<span id="cb21-2">* 3.10.5 (set by /Users/MyUserName/.pyenv/version)</span></code></pre></div>
<p>As intended the star * symbol marking the Python version set as global has changed. In case you have several more Python versions installed you can change to each one of them using the <em>pyenv</em> global command shown above.</p>
<p>You can change back to using your system Python version as the global one via the following command:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb22-1">pyenv global system</span></code></pre></div>
</section>
<section id="install-virtualenvwrapper-using-your-system-python-version-and-its-associated-pip-version" class="level2">
<h2 class="anchored" data-anchor-id="install-virtualenvwrapper-using-your-system-python-version-and-its-associated-pip-version">3. Install <strong><em>virtualenvwrapper</em></strong> using your system Python version (and its associated <em>pip</em> version)</h2>
<p><strong>3a:</strong> Before you continue please consider the following important requirement:</p>
<div class="callout-important callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Important
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Before continuing with installing the <em>virtualenvwrapper</em> library make sure that your system Python version is set to global (just run the command <code>pyenv versions</code> and verify that the star * symbol is shown next to the system Python version - as detailed in step 2 above). If that is not the case, you can simply set the system Python version to global by executing this command: <code>pyenv global system</code>.</p>
</div>
</div>
</div>
<p>Being sure that you are using the correct Python version i.e.&nbsp;the system Python version, you can now run the following installation command. It will install the <em>virtualenvwrapper</em> library on your computer [<a href="https://virtualenvwrapper.readthedocs.io/en/latest/install.html#basic-installation">*</a>]<br>
(Note: The usage of the <code>sudo</code> command will require that you enter your admin password before the installation can be executed):</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb23-1">sudo pip3 install virtualenvwrapper</span></code></pre></div>
<p><strong>3b:</strong> Next, we need to configure your terminal to load the <em>virtualenvwrapper</em> commands, i.e.&nbsp;we will modify the existing <code>.zsrh</code> file of your terminal in a way that the <em>virtualenvwrapper</em> commands can be used (we saw already a similar procedure for <em>pyenv</em> - see the details of step 2b). To add three modifications to your <code>~.zshrc</code> file please execute the following three commands within your terminal window [<a href="https://virtualenvwrapper.readthedocs.io/en/latest/install.html#shell-startup-file">*</a>]:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb24-1">echo 'export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3' &gt;&gt; ~/.zshrc</span>
<span id="cb24-2">echo 'export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv' &gt;&gt; ~/.zshrc</span>
<span id="cb24-3">echo 'source /usr/local/bin/virtualenvwrapper.sh' &gt;&gt; ~/.zshrc</span></code></pre></div>
<p>You can verify the three newly appended lines by opening the <code>.zshrc</code> configuration file: just enter this command in your terminal:</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb25-1">open ~/.zshrc </span></code></pre></div>
<p><strong>3c:</strong> Finally, we ready to create our first virtual environment on the basis of our now established setup. However, before creating the virtual environment we need to make one last decision: Which Python version do we want to use in order to create this virtual environment?</p>
<p>Remember: We can see which Python versions are actually installed on our computer by running the <em>pyenv</em> command <code>pyenv versions</code>. Executing this command within your terminal will in our example case lead to the following output:</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb26-1">* system (set by /Users/MyUserName/.pyenv/version)</span>
<span id="cb26-2">  3.10.5</span></code></pre></div>
<p>As detailed before (please check 2c) the output provides a list of installed Python versions, while one named “system” is marked by the star * symbol indicating that this version is set to global so that it serves at the moment as the default version of Python. That is, the currently set default Python version is the system Python version. From here, we have two options to proceed:</p>
<ul>
<li><p>In case we make the decision to use the system Python version to create a virtual environment we can now proceed with executing the respective <em>virtualenvwrapper</em> command (please see the tab below: Option I).</p></li>
<li><p>In case we want to use another Python version available on our computer (in our example: Python version 3.10.5), we first need to set this version to global. Only after having changed the default Python version (in our case to 3.10.5) we can then proceed with creating the virtual environment. Please see everything summarized in the tab below (Option II).</p></li>
</ul>
<div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-3-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-1" aria-controls="tabset-3-1" aria-selected="true">Option I (using the system Python version)</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-2" aria-controls="tabset-3-2" aria-selected="false">Option II (using a user-installed Python version)</a></li></ul>
<div class="tab-content">
<div id="tabset-3-1" class="tab-pane active" aria-labelledby="tabset-3-1-tab">
<p>The prerequisite for this option is that the system Python version is set to global (or in other words: when you have entered the terminal command <code>pyenv versions</code> and you see the star * symbol marking the Python version named “system”). If this is not the case, just set the system Python version to global by using the <em>pyenv</em> command as shown before: <code>pyenv global system</code>.</p>
<p>Now you can simply run the following <em>virtualenvwrapper</em> command with a name for the virtual environment of your choice (in the example below I will use the name <em>myenv_test1</em>) to create a new virtual environment:</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb27-1">mkvirtualenv myenv_test1</span></code></pre></div>
<p>Note that executing this command above will <em>create</em> and at the same time <em>activate</em> the new virtual environment: you will notice that the prompt line in your terminal window has changed:</p>
<ul>
<li><p><code>myusername@mbp ~ %</code> (before)</p></li>
<li><p><code>(myenv_test1) myusername@mbp ~ %</code> (after)</p></li>
</ul>
<p>The fact that <code>(myenv_test1)</code> appears before your prompt shows that this virtual environment is in fact activated. A virtual environment constitutes a separate and independent workspace: Any packages you install using <code>pip</code> will be installed within this workspace alone, so that they will not interfere with your other projects, other virtual environments, or your system installation. To work smoothly with virtual environment please see the most important commands (such as activating, deactivating, etc.) in the summary table below.</p>
</div>
<div id="tabset-3-2" class="tab-pane" aria-labelledby="tabset-3-2-tab">
<p>First, we need to know which Python version is set to be the global default: as demonstrated before (see 2d) we get a list of all installed Python versions using this <em>pyenv</em> command: <code>pyenv versions</code>. The output is a list of Python versions, where one is marked by the star * symbol to indicate the version currently set to the global default. For our example case, let’s assume the output looks like the following:</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb28-1"> * system (set by /Users/MyUserName/.pyenv/version)</span>
<span id="cb28-2">  3.10.5</span></code></pre></div>
<p>We decided that we want to use a new user-installed Python version to create a virtual environment. Therefore, based on the output shown above, we need to change the global Python version to 3.10.5. We will do this again by using the <em>pyenv</em> global command (see 2d):</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb29-1">pyenv global 3.10.5 </span></code></pre></div>
<p>With this user-installed Python version (3.10.5) set to global, we can now create a new virtual environment based on this exact Python version. To that end, we will call the <em>virtualenvwrapper</em> command <code>mkvirtualenv</code> together with an additional flag argument <code>-p</code> and specifying the actual Python version to be used for creating the new virtual environment (I will name it this time <em>myenv_test2</em>):</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb30-1">mkvirtualenv -p python3.10.5 myenv_test2</span></code></pre></div>
<p>Executing this command above will <em>create</em> and at the same time <em>activate</em> the new virtual environment: this fact is also reflected by the change in the prompt line of your terminal window:</p>
<ul>
<li><p><code>myusername@mbp ~ %</code> (before)</p></li>
<li><p><code>(myenv_test2) myusername@mbp ~ %</code> (after)</p></li>
</ul>
<p>To work smoothly with virtual environment please see the most important commands (such as activating, deactivating, etc.) in the summary table below.</p>
</div>
</div>
</div>
<p>The following table summarizes some important operations working with virtual environments provided by virtualenvwrapper (for a complete list please see the manual [<a href="https://virtualenvwrapper.readthedocs.io/en/latest/command_ref.html#">*</a>]).</p>
<table class="table">
<caption>Managing virtual environments (<em>virtualenvwrapper</em>)</caption>
<colgroup>
<col style="width: 30%">
<col style="width: 38%">
<col style="width: 30%">
</colgroup>
<thead>
<tr class="header">
<th><strong>Desired Outcome</strong></th>
<th><strong>Command</strong></th>
<th><strong>Comment</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Create a virtual environment named “myenv_test1”</td>
<td><code>mkvirtualenv myenv_test1</code></td>
<td>The creation of the virtual environment is based upon the Python system version</td>
</tr>
<tr class="even">
<td>Create a virtual environment named “myenv_test2” which is based on a specified Python version</td>
<td><code>mkvirtualenv -p python3.10.5 myenv_test2</code></td>
<td>Before specifying a user-installed Python version that version need to be set to global (see 2d)</td>
</tr>
<tr class="odd">
<td>Deactivate the currently running virtual environment</td>
<td><code>deactivate</code></td>
<td>After executing this command the prompt line of your window will have changed (see 3c)</td>
</tr>
<tr class="even">
<td>Re-enable an already created virtual environment named “myenv_test1”</td>
<td><code>workon myenv_test1</code></td>
<td>After executing this command the prompt line of your window will have changed (see 3c)</td>
</tr>
<tr class="odd">
<td>List all virtual environments currently available on your computer</td>
<td><code>lsvirtualenv</code></td>
<td>As an alternative command you can also use <code>workon</code> without any additional arguments</td>
</tr>
<tr class="even">
<td>Remove the virtual environment named “myenv_test1”</td>
<td><code>rmvirtualenv myenv_test1</code></td>
<td>Before removing a given virtual environment you first need to deactivate it</td>
</tr>
</tbody>
</table>
<p>All these steps together should give you a clean and maintainable setup for all your Python coding work. I hope that my explanations helped you on the way. Happy coding &amp; Cheers!</p>


</section>
</section>

 ]]></description>
  <category>python</category>
  <category>productivity</category>
  <category>setup</category>
  <guid>https://gg-delta.github.io/Delta-Science-Blog/posts/post-one/</guid>
  <pubDate>Fri, 04 Nov 2022 00:00:00 GMT</pubDate>
  <media:content url="https://gg-delta.github.io/Delta-Science-Blog/posts/post-one/pexels-paul-theodor-oja-2393736.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
