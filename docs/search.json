[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Delta-Science-Blog",
    "section": "",
    "text": "python\n\n\nproductivity\n\n\nsetup\n\n\n\n\n\n\n\n\n\n\n\nNov 23, 2022\n\n\nGG Supp\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\npython\n\n\nproductivity\n\n\nsetup\n\n\n\n\n\n\n\n\n\n\n\nNov 4, 2022\n\n\nGG Supp\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Understanding is a constant quest and I am grateful to the crowd wisdom of diverse communities that I can tap into (crediting and thanking original contributions that I could replicate myself on the way).\nArtwork attribution: Freepik"
  },
  {
    "objectID": "drafts/draft_01.html",
    "href": "drafts/draft_01.html",
    "title": "Delta-Science-Blog",
    "section": "",
    "text": "Summary (Context/Motivation/Problem/Solution) Most people’s computers have multiple Python versions installed (Macs come with Python pre-installed, often termed system Python). Keeping these versions (the pre-installed system Python version and other user-installed Python versions) separate and controlling them independently (e.g. installing or updating a given Python package for a specific Phython version only) requires an upfront solution. Working with virtual environments, i.e. having a separate workspace for each individual project, necessitates actively defining the Python version that will be used to create a specific virtual environment. Controlling Python versions is thus linked to the task of managing virtual environments. All packages installed in a specific virtual environment will not conflict with other virtual environments (all packages being contained in that particular workspace). Following the steps outlined below, your computer should be in a state where different Python versions coexist peacefully and where you can safely install, upgrade, or remove libraries without affecting other projects. In fact, a working setup that is simple to maintain.\nIntroduction\nA certainty, especially in the world of programming, is that there are numerous paths to the same destination.\nAs a result, there is a plethora of advice available on how to arrive at a working (and hopefully maintainable) setup of a local computer to do data science using Python.\nSpeaking from personal experience, I was always too busy doing the actual work to contemplate about the “ideal” setup, so I decided for the moment to ignore any best practices that might exist somewhere. Besides, given the vast amount of information available, determining the right blueprint to follow is not an easy task (just considering the combinatorial nightmare of different operating systems, python versions, installed or assumed pre-installed software, various IDEs etc etc). In short, there are many flying pieces and thus many degrees of freedom, which inevitably leads to complexity.\nHowever, sooner or later the day always comes when you can’t afford to ignore the Python setup issue any longer simply because something broke (e.g. after installing a new Python package or upgrading an installed one). From that moment on you will be busy finding a way to continue your work. Sometimes a quick fix is possible (after consulting numerous entries at Stack Overflow or similar websites), but sometimes band-aid is not enough, so that you need a fundamental solution.\nIn order to spare you time, research effort and hopefully some nerves I will consicly summarize all steps that resulted into my tested setup. Each step builds on different sources of advice that I will cite along the way (i.e. credits, attribution and thanks are given by explicit references).\nI wrote this summary using macOS (version: 12.6), but you should be able to follow equivalent steps on Linux or Windows (you might need to make some modifications).\nOne last word before going into the details: I mentioned the term “fundamental solution” for a reason: in case you got totally lost with quick fixes that resulted in even more problems later on a fresh installation of the operating system is a radical approach. However, it provides a clean start from where you can begin building your new robust setup that is maintainable for all your future projects. I wrote the following lines with a fresh installation of the operating system in mind:\nBrief overview\nWe’ll go through three main steps below. The following list is intended to provide you with a high-level overview. Each of the three main steps will be explained in the following paragraphs:\n1. Install the homebrew package manager (if you are not sure if you have it check it and eventually update it)\n2. Install pyenv (using homebrew)\n\n\nRunning the installation command in the terminal\n\n\n\nConfigure your terminal: setup your .zsrh file for pyenv\n\n\nUsing pyenv to install a new Python version (in addition to your system Python version)\n\n\nSwitching between the availability of different Python versions\n\n\n3. Install virtualenwrapper using your system Python version (and its associated pip version)\n\n\nRunning the installation command in the terminal\n\n\nConfigure your terminal to load the virtualenvwrapper commands\n\n\nSetup a new virtual envrionment on the basis of a specific Python version\n\n\n\n— title: “Save time and nerves by controlling different Python versions (pyenv) and managing virtual environments (virtualenvwrapper)” author: “GG Supp” date: “2022-10-25” categories: [news, code, analysis] image: “image.jpg” format: html: code-copy: true draft: true —"
  },
  {
    "objectID": "drafts/draft_01.html#install-the-homebrew-package-manager",
    "href": "drafts/draft_01.html#install-the-homebrew-package-manager",
    "title": "Delta-Science-Blog",
    "section": "1. Install the homebrew package manager",
    "text": "1. Install the homebrew package manager\nAs a first step you should install homebrew which is a very useful and straightforward package manager (for macOS/Linux). In order to enter the code below open a terminal window (you can do this by opening macOS spotlight - or via your keyboard: just hit both keys command plus space at once - type “terminal” and open this application).\nNow that you have your terminal window open, you can enter the following commands shown below:"
  },
  {
    "objectID": "drafts/draft_01.html#install-homebrew",
    "href": "drafts/draft_01.html#install-homebrew",
    "title": "Delta-Science-Blog",
    "section": "Install homebrew",
    "text": "Install homebrew\nTo install homebrew on your computer: paste this command in your terminal window and hit enter. After hitting enter the script will explain what it will do and then pauses before it does it:\n{default} /bin/bash -c “$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)”"
  },
  {
    "objectID": "drafts/draft_01.html#check-homebrew-installedversion",
    "href": "drafts/draft_01.html#check-homebrew-installedversion",
    "title": "Delta-Science-Blog",
    "section": "Check homebrew (installed/version)",
    "text": "Check homebrew (installed/version)\nTo verify and check whether you have homebrew already installed you can the following command. In case you have homebrew installed the output will tell you which version it is. If you don’t have it installed yet, the output will tell you something like command not found.\n{default} brew –version\nExample output in case your computer has homebrew installed (your version might differ):\n{default} Homebrew 3.6.6 Homebrew/homebrew-core (git revision 7ec3c2d24e8; last commit 2022-10-24) Homebrew/homebrew-cask (git revision c3048a8013; last commit 2022-10-24)"
  },
  {
    "objectID": "drafts/draft_01.html#update-homebrew",
    "href": "drafts/draft_01.html#update-homebrew",
    "title": "Delta-Science-Blog",
    "section": "Update homebrew",
    "text": "Update homebrew\nAfter having verified that your computer has homebrew installed, update it to make sure you have the latest version. Just enter the following command in your terminal window and hit enter [*].\n{default}"
  },
  {
    "objectID": "drafts/draft_01.html#install-pyenv-via-homebrew",
    "href": "drafts/draft_01.html#install-pyenv-via-homebrew",
    "title": "Delta-Science-Blog",
    "section": "2. Install pyenv (via homebrew)",
    "text": "2. Install pyenv (via homebrew)\n\nTotal OLD\n— title: “Save time and nerves by controlling different Python versions (pyenv) and managing virtual environments (virtualenvwrapper)” author: “GG Supp” date: “2022-10-25” categories: [news, code, analysis] image: “image.jpg” draft: true —"
  },
  {
    "objectID": "drafts/draft_01.html#install-the-homebrew-package-manager-1",
    "href": "drafts/draft_01.html#install-the-homebrew-package-manager-1",
    "title": "Delta-Science-Blog",
    "section": "1. Install the homebrew package manager",
    "text": "1. Install the homebrew package manager\nAs a first step you should install homebrew which is a very useful and straightforward package manager (for macOS/Linux). In order to enter the code below open a terminal window (you can do this by opening macOS spotlight - or via your keyboard: just hit both keys command plus space at once - type “terminal” and open this application).\nNow that you have your terminal window open, you can enter the following commands shown below:"
  },
  {
    "objectID": "drafts/draft_01.html#install-homebrew-1",
    "href": "drafts/draft_01.html#install-homebrew-1",
    "title": "Delta-Science-Blog",
    "section": "Install homebrew",
    "text": "Install homebrew\nTo install homebrew on your computer: paste this command in your terminal window and hit enter. After hitting enter the script will explain what it will do and then pauses before it does it:\n{default} /bin/bash -c “$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)”"
  },
  {
    "objectID": "drafts/draft_01.html#check-homebrew-installedversion-1",
    "href": "drafts/draft_01.html#check-homebrew-installedversion-1",
    "title": "Delta-Science-Blog",
    "section": "Check homebrew (installed/version)",
    "text": "Check homebrew (installed/version)\nTo verify and check whether you have homebrew already installed you can the following command. In case you have homebrew installed the output will tell you which version it is. If you don’t have it installed yet, the output will tell you something like command not found.\n{default} brew –version\nExample output in case your computer has homebrew installed (your version might differ):\n{default} Homebrew 3.6.6 Homebrew/homebrew-core (git revision 7ec3c2d24e8; last commit 2022-10-24) Homebrew/homebrew-cask (git revision c3048a8013; last commit 2022-10-24)"
  },
  {
    "objectID": "drafts/draft_01.html#update-homebrew-1",
    "href": "drafts/draft_01.html#update-homebrew-1",
    "title": "Delta-Science-Blog",
    "section": "Update homebrew",
    "text": "Update homebrew\nAfter having verified that your computer has homebrew installed, update it to make sure you have the latest version. Just enter the following command in your terminal window and hit enter [*].\n{default}"
  },
  {
    "objectID": "drafts/draft_01.html#install-pyenv-via-homebrew-1",
    "href": "drafts/draft_01.html#install-pyenv-via-homebrew-1",
    "title": "Delta-Science-Blog",
    "section": "2. Install pyenv (via homebrew)",
    "text": "2. Install pyenv (via homebrew)"
  },
  {
    "objectID": "posts/post-with-code2/index.html",
    "href": "posts/post-with-code2/index.html",
    "title": "Save time & nerves: start controlling different Python versions (pyenv) and managing virtual environments (virtualenvwrapper)",
    "section": "",
    "text": "Most people’s computers have multiple Python versions installed (Macs come with Python pre-installed, often termed system Python). Keeping these versions (the pre-installed system Python version and other user-installed Python versions) separate and controlling them independently (e.g. installing or updating a given Python package for a specific Python version only) requires an upfront solution. Working with virtual environments, i.e. having a separate workspace for each individual project, necessitates actively defining the Python version that will be used to create a specific virtual environment. Controlling Python versions is thus linked to the task of managing virtual environments. All packages installed in a specific virtual environment will not conflict with other virtual environments (all packages being contained in that particular workspace).\nFollowing the steps outlined here below, your computer should be in a state where different Python versions coexist peacefully and where you can safely install, upgrade, or remove libraries without affecting other projects. In fact, a working setup that is simple to maintain."
  },
  {
    "objectID": "posts/post-with-code2/index.html#install-the-homebrew-package-manager",
    "href": "posts/post-with-code2/index.html#install-the-homebrew-package-manager",
    "title": "Save time & nerves: start controlling different Python versions (pyenv) and managing virtual environments (virtualenvwrapper)",
    "section": "1. Install the homebrew package manager",
    "text": "1. Install the homebrew package manager\nAs a first step you should install homebrew which is a very useful and straightforward package manager (for macOS/Linux). In order to enter the code below open a terminal window (you can do this by opening macOS spotlight - or via your keyboard: just hit both keys command + space at once - then type “terminal” and open this application).\nNow that you have your terminal window open, you can enter the following commands shown below (select the commands matching your case):\n\nInstall homebrewCheck homebrew (installed/version)Update homebrew\n\n\nTo install homebrew on your computer: paste this command in your terminal window and hit enter. After hitting enter the script will explain what it will do and then pauses before it does it:\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\n\n\nTo verify and check whether you have homebrew already installed, you can enter the command shown below. In the case you have homebrew installed, the output will tell you which version it is. If you don’t have it installed yet, the output will tell you something like command not found.\nbrew --version\nExample output in case your computer has homebrew already installed (your version might differ):\nHomebrew 3.6.6 \nHomebrew/homebrew-core (git revision 7ec3c2d24e8; last commit 2022-10-24) \nHomebrew/homebrew-cask (git revision c3048a8013; last commit 2022-10-24)\n\n\nAfter having verified that your computer has homebrew installed, update it to make sure you have the latest version. Just enter the following command in your terminal window and hit enter [*].\nbrew update"
  },
  {
    "objectID": "posts/post-with-code2/index.html#install-pyenv-via-homebrew",
    "href": "posts/post-with-code2/index.html#install-pyenv-via-homebrew",
    "title": "Save time & nerves: start controlling different Python versions (pyenv) and managing virtual environments (virtualenvwrapper)",
    "section": "2. Install pyenv (via homebrew)",
    "text": "2. Install pyenv (via homebrew)\n2a: Run the following installation command in the terminal [*].\nbrew install pyenv\n2b: Now you need to configure your terminal (or shell) in a way so that the pyenv commands will be loaded. You do this by editing the configuration file of your terminal represented by .zshrc, .bashrc or other file types (sometimes subsumed under the term “shell’s rc file”, the affix means \"run commands\"). Given that macOS default is based on the zsh Unix shell - also known as Z shell - we will focus to edit only this configuration file (for other options please see this manual: [*]). The configuration file for zsh is called .zshrc and is located in your home folder (~/.zshrc).\nBefore trying to edit a file we should make sure that the hidden .zshrc file is actually there:\n\nCheck .zshrc via FinderCheck .zshrc via TerminalCreate .zshrc file (if its not there)\n\n\nTo view the hidden .zshrc file in your home directory you can do the following within macOS Finder: Open Finder and navigate to your home directory (e.g, something like /Users/MyUserName): hit the following keys at once: Command + Shift +.\nBy using this command you told Finder to display usually hidden files (i.e. files starting with a dot). If you see the .zshrc file within Finder you can open it by selecting any text editing application (e.g. TextEdit). In case there is no .zshrc file in your home directory, please create one: just see the instructions in this section (tab).\n\n\nOpen a terminal window (the hidden file should be located in your home folder: something like /Users/MyUserName/) and enter the following command:\nopen ~/.zshrc\nIn case this file doesn’t exist you will receive a respective feedback (“file doesn’t exist”). In case there is no such .zshrc file in your home directory, please create one: just see the instructions in this section (tab).\n\n\nWithin your terminal window enter the following command:\ntouch ~/.zshrc\nThe operation starting with touch will create the hidden .zshrc file in your home directory. You can verify the creation of this file by following one of the options shown in this section (see other tabs).\n\n\n\nSince we made sure that the configuration file for our shell is indeed available (i.e., the .zshrc file) we can now add the following three expressions to this configuration file. To add these modifications to your shell’s configuration enter the following commands in your terminal:\necho 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.zshrc\necho 'command -v pyenv >/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.zshrc\necho 'eval \"$(pyenv init -)\"' >> ~/.zshrc   \nAfter having executed these commands your .zshrc file will have three new lines included.\n\n\n\n\n\n\nNote\n\n\n\n\n\nYou can verify the successful installation and setup of pyenv by entering the following command in your terminal window:\npyenv\nIf all went fine, you should receive the output of the actual version of pyenv installed. In my case the output is as follows:\npyenv 2.3.5\nIn addition, you should see a list of command options (e.g. “--version”, “commands”, “exec” and several more).\nWith pyenv installed successfully you can get a nice overview about all installed Python versions: just enter the following pyenv command:\npyenv versions\nSince we haven’t yet installed any additional Python version, pyenv will show you the system Python version (pre-installed on our macOS): you will see something like this (exemplary output):\n  * system (set by /Users/MyUserName/.pyenv/version)\nGiven that no other version of Python is installed pyenv is enlisting the Python system version. The star * symbol marks the Python version set to be global, that is the Python version that serves as the default version of Python which macOS uses when running Python applications.\nYou can use the following command to confirm the location of the Python system version:\npyenv which python3\nThis will show the following output:\n/usr/bin/python3\nThis shows the actual path to your system Python version.\nYou might be tempted to enter the traditional terminal command which python3 to locate the Python’s location. However, this command will reveal only the pyenv path modifications inserted in your shell’s configuration. In fact you will see something like this: /Users/MyUserName/.pyenv/shims/python3\n\n\n\n2c: We are now ready to pyenv in order to install a new Python version. In case you know the precise Python version you would like to install (for the sake of this example let’s say 3.10.5) simply execute the following pyenv command:\npyenv install 3.10.5\nTo verify which Python versions are installed and available on your computer just enter the following command we saw before:\npyenv versions\nThis time the output should look like along these lines:\n* system (set by /Users/ggs/.pyenv/version)\n  3.10.5\nThe output provides a list of all installed Python versions, while the star * symbol marks the Python version set to be global (default).\n\n\n\n\n\n\nNice to know: Which Python versions are available to install?\n\n\n\n\n\nIn case you would like to get a list of all Python versions that are available to be installed via pyenv you can use the following command (as a shortcut you can also type: pyenv install -l):\npyenv install --list\nThis command will give you a list of available Python versions (and additionally showing other libraries we can ignore for the moment) such as:\nAvailable versions:\n  2.1.3\n  2.2.3\n  2.3.7\n...\n  3.10.5\n  3.10.6\n  3.10.7\n...\n\n\n\n2d: For our current example we have seen two versions of Python installed on our computer. Using pyenv we can switch between these two Python versions, that is we can select one version and set it the global default: this global Python version will become the one macOS uses when running Python applications. Set a given Python version to global by executing the following command:\npyenv global 3.10.5\nWhen running the previously shown command pyenv versions again we will see that the Python version marked to be global has changed accordingly (exemplary output):\nsystem\n* 3.10.5 (set by /Users/MyUserName/.pyenv/version)\nAs intended the star * symbol marking the Python version set as global has changed. In case you have several more Python versions installed you can change to each one of them using the pyenv global command shown above.\nYou can change back to using your system Python version as the global one via the following command:\npyenv global system"
  },
  {
    "objectID": "posts/post-with-code2/index.html#install-virtualenvwrapper-using-your-system-python-version-and-its-associated-pip-version",
    "href": "posts/post-with-code2/index.html#install-virtualenvwrapper-using-your-system-python-version-and-its-associated-pip-version",
    "title": "Save time & nerves: start controlling different Python versions (pyenv) and managing virtual environments (virtualenvwrapper)",
    "section": "3. Install virtualenvwrapper using your system Python version (and its associated pip version)",
    "text": "3. Install virtualenvwrapper using your system Python version (and its associated pip version)\n3a: Before you continue please consider the following important requirement:\n\n\n\n\n\n\nImportant\n\n\n\n\n\nBefore continuing with installing the virtualenvwrapper library make sure that your system Python version is set to global (just run the command pyenv versions and verify that the star * symbol is shown next to the system Python version - as detailed in step 2 above). If that is not the case, you can simply set the system Python version to global by executing this command: pyenv global system.\n\n\n\nBeing sure that you are using the correct Python version i.e. the system Python version, you can now run the following installation command. It will install the virtualenvwrapper library on your computer [*]\n(Note: The usage of the sudo command will require that you enter your admin password before the installation can be executed):\nsudo pip3 install virtualenvwrapper\n3b: Next, we need to configure your terminal to load the virtualenvwrapper commands, i.e. we will modify the existing .zsrh file of your terminal in a way that the virtualenvwrapper commands can be used (we saw already a similar procedure for pyenv - see the details of step 2b). To add three modifications to your ~.zshrc file please execute the following three commands within your terminal window [*]:\necho 'export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3' >> ~/.zshrc\necho 'export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv' >> ~/.zshrc\necho 'source /usr/local/bin/virtualenvwrapper.sh' >> ~/.zshrc\nYou can verify the three newly appended lines by opening the .zshrc configuration file: just enter this command in your terminal:\nopen ~/.zshrc \n3c: Finally, we ready to create our first virtual environment on the basis of our now established setup. However, before creating the virtual environment we need to make one last decision: Which Python version do we want to use in order to create this virtual environment?\nRemember: We can see which Python versions are actually installed on our computer by running the pyenv command pyenv versions. Executing this command within your terminal will in our example case lead to the following output:\n* system (set by /Users/MyUserName/.pyenv/version)\n  3.10.5\nAs detailed before (please check 2c) the output provides a list of installed Python versions, while one named “system” is marked by the star * symbol indicating that this version is set to global so that it serves at the moment as the default version of Python. That is, the currently set default Python version is the system Python version. From here, we have two options to proceed:\n\nIn case we make the decision to use the system Python version to create a virtual environment we can now proceed with executing the respective virtualenvwrapper command (please see the tab below: Option I).\nIn case we want to use another Python version available on our computer (in our example: Python version 3.10.5), we first need to set this version to global. Only after having changed the default Python version (in our case to 3.10.5) we can then proceed with creating the virtual environment. Please see everything summarized in the tab below (Option II).\n\n\nOption I (using the system Python version)Option II (using a user-installed Python version)\n\n\nThe prerequisite for this option is that the system Python version is set to global (or in other words: when you have entered the terminal command pyenv versions and you see the star * symbol marking the Python version named “system”). If this is not the case, just set the system Python version to global by using the pyenv command as shown before: pyenv global system.\nNow you can simply run the following virtualenvwrapper command with a name for the virtual environment of your choice (in the example below I will use the name myenv_test1) to create a new virtual environment:\nmkvirtualenv myenv_test1\nNote that executing this command above will create and at the same time activate the new virtual environment: you will notice that the prompt line in your terminal window has changed:\n\nmyusername@mbp ~ % (before)\n(myenv_test1) myusername@mbp ~ % (after)\n\nThe fact that (myenv_test1) appears before your prompt shows that this virtual environment is in fact activated. A virtual environment constitutes a separate and independent workspace: Any packages you install using pip will be installed within this workspace alone, so that they will not interfere with your other projects, other virtual environments, or your system installation. To work smoothly with virtual environment please see the most important commands (such as activating, deactivating, etc.) in the summary table below.\n\n\nFirst, we need to know which Python version is set to be the global default: as demonstrated before (see 2d) we get a list of all installed Python versions using this pyenv command: pyenv versions. The output is a list of Python versions, where one is marked by the star * symbol to indicate the version currently set to the global default. For our example case, let’s assume the output looks like the following:\n * system (set by /Users/MyUserName/.pyenv/version)\n  3.10.5\nWe decided that we want to use a new user-installed Python version to create a virtual environment. Therefore, based on the output shown above, we need to change the global Python version to 3.10.5. We will do this again by using the pyenv global command (see 2d):\npyenv global 3.10.5 \nWith this user-installed Python version (3.10.5) set to global, we can now create a new virtual environment based on this exact Python version. To that end, we will call the virtualenvwrapper command mkvirtualenv together with an additional flag argument -p and specifying the actual Python version to be used for creating the new virtual environment (I will name it this time myenv_test2):\nmkvirtualenv -p python3.10.5 myenv_test2\nExecuting this command above will create and at the same time activate the new virtual environment: this fact is also reflected by the change in the prompt line of your terminal window:\n\nmyusername@mbp ~ % (before)\n(myenv_test2) myusername@mbp ~ % (after)\n\nTo work smoothly with virtual environment please see the most important commands (such as activating, deactivating, etc.) in the summary table below.\n\n\n\nThe following table summarizes some important operations working with virtual environments provided by virtualenvwrapper (for a complete list please see the manual [*]).\n\nManaging virtual environments (virtualenvwrapper)\n\n\n\n\n\n\n\nDesired Outcome\nCommand\nComment\n\n\n\n\nCreate a virtual environment named “myenv_test1”\nmkvirtualenv myenv_test1\nThe creation of the virtual environment is based upon the Python system version\n\n\nCreate a virtual environment named “myenv_test2” which is based on a specified Python version\nmkvirtualenv -p python3.10.5 myenv_test2\nBefore specifying a user-installed Python version that version need to be set to global (see 2d)\n\n\nDeactivate the currently running virtual environment\ndeactivate\nAfter executing this command the prompt line of your window will have changed (see 3c)\n\n\nRe-enable an already created virtual environment named “myenv_test1”\nworkon myenv_test1\nAfter executing this command the prompt line of your window will have changed (see 3c)\n\n\nList all virtual environments currently available on your computer\nlsvirtualenv\nAs an alternative command you can also use workon without any additional arguments\n\n\nRemove the virtual environment named “myenv_test1”\nrmvirtualenv myenv_test1\nBefore removing a given virtual environment you first need to deactivate it"
  },
  {
    "objectID": "posts/post-one/index.html",
    "href": "posts/post-one/index.html",
    "title": "Save time & nerves: start controlling different Python versions (pyenv) and managing virtual environments (virtualenvwrapper)",
    "section": "",
    "text": "Most people’s computers have multiple Python versions installed (macOS comes with Python pre-installed, often termed system Python). Keeping these versions (the pre-installed system Python version and other user-installed Python versions) separate and controlling them independently (e.g. installing or updating a given Python package for a specific Python version only) requires an upfront solution.\nWorking with virtual environments, i.e. having a separate workspace for each individual project, necessitates actively defining the Python version that will be used to create a specific virtual environment. Controlling Python versions is thus linked to the task of managing virtual environments. All packages installed in a specific virtual environment will not conflict with other virtual environments (all packages being contained in that particular workspace).\nFollowing the steps outlined here below, your computer should be in a state where different Python versions coexist peacefully and where you can safely install, upgrade, or remove libraries without affecting other projects. In fact, a working setup that is simple to maintain."
  },
  {
    "objectID": "posts/post-one/index.html#install-the-homebrew-package-manager",
    "href": "posts/post-one/index.html#install-the-homebrew-package-manager",
    "title": "Save time & nerves: start controlling different Python versions (pyenv) and managing virtual environments (virtualenvwrapper)",
    "section": "1. Install the homebrew package manager",
    "text": "1. Install the homebrew package manager\nAs a first step you should install homebrew which is a very useful and straightforward package manager (for macOS/Linux). In order to enter the code below open a terminal window (you can do this by opening macOS spotlight - or via your keyboard: just hit both keys command + space at once - then type “terminal” and open this application).\nNow that you have your terminal window open, you can enter the following commands shown below (select the commands matching your case):\n\nInstall homebrewCheck homebrew (installed/version)Update homebrew\n\n\nTo install homebrew on your computer: paste this command in your terminal window and hit enter. After hitting enter the script will explain what it will do and then pauses before it does it:\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\n\n\nTo verify and check whether you have homebrew already installed, you can enter the command shown below. In the case you have homebrew installed, the output will tell you which version it is. If you don’t have it installed yet, the output will tell you something like command not found.\nbrew --version\nExample output in case your computer has homebrew already installed (your version might differ):\nHomebrew 3.6.6 \nHomebrew/homebrew-core (git revision 7ec3c2d24e8; last commit 2022-10-24) \nHomebrew/homebrew-cask (git revision c3048a8013; last commit 2022-10-24)\n\n\nAfter having verified that your computer has homebrew installed, update it to make sure you have the latest version. Just enter the following command in your terminal window and hit enter [*].\nbrew update"
  },
  {
    "objectID": "posts/post-one/index.html#install-pyenv-via-homebrew",
    "href": "posts/post-one/index.html#install-pyenv-via-homebrew",
    "title": "Save time & nerves: start controlling different Python versions (pyenv) and managing virtual environments (virtualenvwrapper)",
    "section": "2. Install pyenv (via homebrew)",
    "text": "2. Install pyenv (via homebrew)\n2a: Run the following installation command in the terminal [*].\nbrew install pyenv\n2b: Now you need to configure your terminal (or shell) in a way so that the pyenv commands will be loaded. You do this by editing the configuration file of your terminal represented by .zshrc, .bashrc or other file types (sometimes subsumed under the term “shell’s rc file”, the affix means “run commands”). Given that macOS default is based on the zsh Unix shell - also known as Z shell - we will focus to edit only this configuration file (for other options please see this manual: [*]). The configuration file for zsh is called .zshrc and is located in your home folder (~/.zshrc).\nBefore trying to edit a file we should make sure that the hidden .zshrc file is actually there:\n\nCheck .zshrc via FinderCheck .zshrc via TerminalCreate .zshrc file (if its not there)\n\n\nTo view the hidden .zshrc file in your home directory you can do the following within macOS Finder: Open Finder and navigate to your home directory (e.g, something like /Users/MyUserName): hit the following keys at once: Command + Shift +.\nBy using this command you told Finder to display usually hidden files (i.e. files starting with a dot). If you see the .zshrc file within Finder you can open it by selecting any text editing application (e.g. TextEdit). In case there is no .zshrc file in your home directory, please create one: just see the instructions in this section (tab).\n\n\nOpen a terminal window (the hidden file should be located in your home folder: something like /Users/MyUserName/) and enter the following command:\nopen ~/.zshrc\nIn case this file doesn’t exist you will receive a respective feedback (“file doesn’t exist”). In case there is no such .zshrc file in your home directory, please create one: just see the instructions in this section (tab).\n\n\nWithin your terminal window enter the following command:\ntouch ~/.zshrc\nThe operation starting with touch will create the hidden .zshrc file in your home directory. You can verify the creation of this file by following one of the options shown in this section (see other tabs).\n\n\n\nSince we made sure that the configuration file for our shell is indeed available (i.e., the .zshrc file) we can now add the following three expressions to this configuration file. To add these modifications to your shell’s configuration enter the following commands in your terminal:\necho 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.zshrc\necho 'command -v pyenv >/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.zshrc\necho 'eval \"$(pyenv init -)\"' >> ~/.zshrc   \nAfter having executed these commands your .zshrc file will have three new lines included.\n\n\n\n\n\n\nNote\n\n\n\n\n\nYou can verify the successful installation and setup of pyenv by entering the following command in your terminal window:\npyenv\nIf all went fine, you should receive the output of the actual version of pyenv installed. In my case the output is as follows:\npyenv 2.3.5\nIn addition, you should see a list of command options (e.g. “--version”, “commands”, “exec” and several more).\nWith pyenv installed successfully you can get a nice overview about all installed Python versions: just enter the following pyenv command:\npyenv versions\nSince we haven’t yet installed any additional Python version, pyenv will show you the system Python version (pre-installed on our macOS): you will see something like this (exemplary output):\n  * system (set by /Users/MyUserName/.pyenv/version)\nGiven that no other version of Python is installed pyenv is enlisting the Python system version. The star * symbol marks the Python version set to be global, that is the Python version that serves as the default version of Python which macOS uses when running Python applications.\nYou can use the following command to confirm the location of the Python system version:\npyenv which python3\nThis will show the following output:\n/usr/bin/python3\nThis shows the actual path to your system Python version.\nYou might be tempted to enter the traditional terminal command which python3 to locate the Python’s location. However, this command will reveal only the pyenv path modifications inserted in your shell’s configuration. In fact you will see something like this: /Users/MyUserName/.pyenv/shims/python3\n\n\n\n2c: We are now ready to pyenv in order to install a new Python version. In case you know the precise Python version you would like to install (for the sake of this example let’s say 3.10.5) simply execute the following pyenv command:\npyenv install 3.10.5\nTo verify which Python versions are installed and available on your computer just enter the following command we saw before:\npyenv versions\nThis time the output should look like along these lines:\n* system (set by /Users/ggs/.pyenv/version)\n  3.10.5\nThe output provides a list of all installed Python versions, while the star * symbol marks the Python version set to be global (default).\n\n\n\n\n\n\nNice to know: Which Python versions are available to install?\n\n\n\n\n\nIn case you would like to get a list of all Python versions that are available to be installed via pyenv you can use the following command (as a shortcut you can also type: pyenv install -l):\npyenv install --list\nThis command will give you a list of available Python versions (and additionally showing other libraries we can ignore for the moment) such as:\nAvailable versions:\n  2.1.3\n  2.2.3\n  2.3.7\n...\n  3.10.5\n  3.10.6\n  3.10.7\n...\n\n\n\n2d: For our current example we have seen two versions of Python installed on our computer. Using pyenv we can switch between these two Python versions, that is we can select one version and set it the global default: this global Python version will become the one macOS uses when running Python applications. Set a given Python version to global by executing the following command:\npyenv global 3.10.5\nWhen running the previously shown command pyenv versions again we will see that the Python version marked to be global has changed accordingly (exemplary output):\nsystem\n* 3.10.5 (set by /Users/MyUserName/.pyenv/version)\nAs intended the star * symbol marking the Python version set as global has changed. In case you have several more Python versions installed you can change to each one of them using the pyenv global command shown above.\nYou can change back to using your system Python version as the global one via the following command:\npyenv global system"
  },
  {
    "objectID": "posts/post-one/index.html#install-virtualenvwrapper-using-your-system-python-version-and-its-associated-pip-version",
    "href": "posts/post-one/index.html#install-virtualenvwrapper-using-your-system-python-version-and-its-associated-pip-version",
    "title": "Save time & nerves: start controlling different Python versions (pyenv) and managing virtual environments (virtualenvwrapper)",
    "section": "3. Install virtualenvwrapper using your system Python version (and its associated pip version)",
    "text": "3. Install virtualenvwrapper using your system Python version (and its associated pip version)\n3a: Before you continue please consider the following important requirement:\n\n\n\n\n\n\nImportant\n\n\n\n\n\nBefore continuing with installing the virtualenvwrapper library make sure that your system Python version is set to global (just run the command pyenv versions and verify that the star * symbol is shown next to the system Python version - as detailed in step 2 above). If that is not the case, you can simply set the system Python version to global by executing this command: pyenv global system.\n\n\n\nBeing sure that you are using the correct Python version i.e. the system Python version, you can now run the following installation command. It will install the virtualenvwrapper library on your computer [*]\n(Note: The usage of the sudo command will require that you enter your admin password before the installation can be executed):\nsudo pip3 install virtualenvwrapper\n3b: Next, we need to configure your terminal to load the virtualenvwrapper commands, i.e. we will modify the existing .zsrh file of your terminal in a way that the virtualenvwrapper commands can be used (we saw already a similar procedure for pyenv - see the details of step 2b). To add three modifications to your ~.zshrc file please execute the following three commands within your terminal window [*]:\necho 'export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3' >> ~/.zshrc\necho 'export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv' >> ~/.zshrc\necho 'source /usr/local/bin/virtualenvwrapper.sh' >> ~/.zshrc\nYou can verify the three newly appended lines by opening the .zshrc configuration file: just enter this command in your terminal:\nopen ~/.zshrc \n3c: Finally, we ready to create our first virtual environment on the basis of our now established setup. However, before creating the virtual environment we need to make one last decision: Which Python version do we want to use in order to create this virtual environment?\nRemember: We can see which Python versions are actually installed on our computer by running the pyenv command pyenv versions. Executing this command within your terminal will in our example case lead to the following output:\n* system (set by /Users/MyUserName/.pyenv/version)\n  3.10.5\nAs detailed before (please check 2c) the output provides a list of installed Python versions, while one named “system” is marked by the star * symbol indicating that this version is set to global so that it serves at the moment as the default version of Python. That is, the currently set default Python version is the system Python version. From here, we have two options to proceed:\n\nIn case we make the decision to use the system Python version to create a virtual environment we can now proceed with executing the respective virtualenvwrapper command (please see the tab below: Option I).\nIn case we want to use another Python version available on our computer (in our example: Python version 3.10.5), we first need to set this version to global. Only after having changed the default Python version (in our case to 3.10.5) we can then proceed with creating the virtual environment. Please see everything summarized in the tab below (Option II).\n\n\nOption I (using the system Python version)Option II (using a user-installed Python version)\n\n\nThe prerequisite for this option is that the system Python version is set to global (or in other words: when you have entered the terminal command pyenv versions and you see the star * symbol marking the Python version named “system”). If this is not the case, just set the system Python version to global by using the pyenv command as shown before: pyenv global system.\nNow you can simply run the following virtualenvwrapper command with a name for the virtual environment of your choice (in the example below I will use the name myenv_test1) to create a new virtual environment:\nmkvirtualenv myenv_test1\nNote that executing this command above will create and at the same time activate the new virtual environment: you will notice that the prompt line in your terminal window has changed:\n\nmyusername@mbp ~ % (before)\n(myenv_test1) myusername@mbp ~ % (after)\n\nThe fact that (myenv_test1) appears before your prompt shows that this virtual environment is in fact activated. A virtual environment constitutes a separate and independent workspace: Any packages you install using pip will be installed within this workspace alone, so that they will not interfere with your other projects, other virtual environments, or your system installation. To work smoothly with virtual environment please see the most important commands (such as activating, deactivating, etc.) in the summary table below.\n\n\nFirst, we need to know which Python version is set to be the global default: as demonstrated before (see 2d) we get a list of all installed Python versions using this pyenv command: pyenv versions. The output is a list of Python versions, where one is marked by the star * symbol to indicate the version currently set to the global default. For our example case, let’s assume the output looks like the following:\n * system (set by /Users/MyUserName/.pyenv/version)\n  3.10.5\nWe decided that we want to use a new user-installed Python version to create a virtual environment. Therefore, based on the output shown above, we need to change the global Python version to 3.10.5. We will do this again by using the pyenv global command (see 2d):\npyenv global 3.10.5 \nWith this user-installed Python version (3.10.5) set to global, we can now create a new virtual environment based on this exact Python version. To that end, we will call the virtualenvwrapper command mkvirtualenv together with an additional flag argument -p and specifying the actual Python version to be used for creating the new virtual environment (I will name it this time myenv_test2):\nmkvirtualenv -p python3.10.5 myenv_test2\nExecuting this command above will create and at the same time activate the new virtual environment: this fact is also reflected by the change in the prompt line of your terminal window:\n\nmyusername@mbp ~ % (before)\n(myenv_test2) myusername@mbp ~ % (after)\n\nTo work smoothly with virtual environment please see the most important commands (such as activating, deactivating, etc.) in the summary table below.\n\n\n\nThe following table summarizes some important operations working with virtual environments provided by virtualenvwrapper (for a complete list please see the manual [*]).\n\nManaging virtual environments (virtualenvwrapper)\n\n\n\n\n\n\n\nDesired Outcome\nCommand\nComment\n\n\n\n\nCreate a virtual environment named “myenv_test1”\nmkvirtualenv myenv_test1\nThe creation of the virtual environment is based upon the Python system version\n\n\nCreate a virtual environment named “myenv_test2” which is based on a specified Python version\nmkvirtualenv -p python3.10.5 myenv_test2\nBefore specifying a user-installed Python version that version need to be set to global (see 2d)\n\n\nDeactivate the currently running virtual environment\ndeactivate\nAfter executing this command the prompt line of your window will have changed (see 3c)\n\n\nRe-enable an already created virtual environment named “myenv_test1”\nworkon myenv_test1\nAfter executing this command the prompt line of your window will have changed (see 3c)\n\n\nList all virtual environments currently available on your computer\nlsvirtualenv\nAs an alternative command you can also use workon without any additional arguments\n\n\nRemove the virtual environment named “myenv_test1”\nrmvirtualenv myenv_test1\nBefore removing a given virtual environment you first need to deactivate it\n\n\n\nAll these steps together should give you a clean and maintainable setup for all your Python coding work. I hope that my explanations helped you on the way. Happy coding & Cheers!"
  },
  {
    "objectID": "posts/post-two/index.html",
    "href": "posts/post-two/index.html",
    "title": "Using Jupyter Notebook in virtual environments in a free source-code editor (VSCodium/VS Code)",
    "section": "",
    "text": "Working on data-science projects often requires to present, showcase and explain interactive source-code and data visualization within a single document. Jupyter Notebook is a tool providing exactly that. In the following lines I will briefly lead you through an exemplary setup that combines Jupyter Notebook running in a specified virtual environment with the fully open-source editor VSCodium (free alternative to VS Code). Following these lines should lead you to a productive setup where you can document your data-science projects in the form of a Jupyter Notebook, while editing its content via the extremely capable VSCodium editor.\nBefore you proceed, please ensure that both of the following conditions are met:\n\nYour computer has a version of Python 3 installed, and\nYour computer is prepared to initialize and run a virtual environment\n\nIf you need assistance or a refresher on these topics you can take a look here: Blog-Post-01.\nI wrote this summary using macOS (version: 12.6), but you should be able to follow equivalent steps on Linux or Windows (you might need to make some modifications)."
  },
  {
    "objectID": "posts/post-two/index.html#install-and-setup-vscodium",
    "href": "posts/post-two/index.html#install-and-setup-vscodium",
    "title": "Using Jupyter Notebook in virtual environments in a free source-code editor (VSCodium/VS Code)",
    "section": "1. Install and setup VSCodium",
    "text": "1. Install and setup VSCodium\nAs a first step you should download and install (in case you don’t have it) the fully open-source editor VSCodium which is known as the free alternative for the popular VS Code editor of Microsoft. Please follow one of the following options:\n\nInstall via brewInstall via .dmg\n\n\nIn case you have followed the steps in my earlier post (Blog-Post-01), you will have homebrew already installed on your computer. If not, please consider to get homebrew: it is a very useful and straightforward package manager (for macOS/Linux).\nNow, assuming your computer has homebrew installed, please open a terminal window (you can do this by opening macOS spotlight - or via your keyboard: just hit both keys command + space at once - then type “terminal” and open this application).\nIn your open terminal window enter and execute the following command to install the VSCodium editor:\nbrew install --cask vscodium\n\n\nA list of the most recent VSCodium releases in various formats can be found here. Open this link and scroll down to the .dmg file section and download the appropriate file matching your computer’s architecture (note the respective suffix of the listed file names: .arm64. should used for newer Macs built on Apple Silicon, while .x64. for all Intel Macs).\nAfter downloading the .dmg file, double-click the file to open it, and you'll see a Finder window. Simply drag the VSCodium icon into the Applications folder and you are done with the installation.\n\n\n\nTo prepare the editor for Jupyter Notebook we just need to install and enable the following extension: just navigate to the left vertical menu column of VSCodium and open the section called “Extensions” (keyboard shortcut: shift + command + X). You can see the arrow in the color highlighted screenshot below.\n\n\n\nVSCodium: Select and open the extension section\n\n\nWithin the extensions window of VSCodium you will see a search mask (top left corner): enter there the word “Jupyter” and search in the resulting list for the extension option called “Jupyter Extension for Visual Studio Code” that is published by ms-toolsai. Click on the installation button displayed next to it. After the installation you should see the updated status of this extension reflected by both buttons “disable” and “uninstall” - see the screenshot below:\n\n\n\nVSCodium: Extensions window\n\n\n\n\n\n\n\n\nSmart move: Include Python extension\n\n\n\n\n\nSince you are already in the right place it will not hurt (quite the contrary) to include another extension, namely “Python” published by ms-python. This extension (its complete title is “Python extension for Visual Studio Code”) provides extensive language support for Python with code editing features such as code completion, parameter info, quick info etc."
  },
  {
    "objectID": "posts/post-two/index.html#start-virtual-environment-and-install-two-fundamental-python-packages",
    "href": "posts/post-two/index.html#start-virtual-environment-and-install-two-fundamental-python-packages",
    "title": "Using Jupyter Notebook in virtual environments in a free source-code editor (VSCodium/VS Code)",
    "section": "2. Start virtual environment and install two fundamental Python packages",
    "text": "2. Start virtual environment and install two fundamental Python packages"
  },
  {
    "objectID": "posts/post-two/index.html#activate-an-existing-virtual-environment-and-install-two-fundamental-python-packages",
    "href": "posts/post-two/index.html#activate-an-existing-virtual-environment-and-install-two-fundamental-python-packages",
    "title": "Using Jupyter Notebook in virtual environments in a free source-code editor (VSCodium/VS Code)",
    "section": "2. Activate an existing virtual environment and install two fundamental Python packages",
    "text": "2. Activate an existing virtual environment and install two fundamental Python packages\nTo manage virtual environments I am using the extremely useful tool virtualenvwrapper. In an earlier post I explained the use of virtual environments together with a detailed instruction of their setup and management (please see here).\nUsing the workon command from virtualenvwrapper without any additional expressions enlists all virtual environments that are currently available on your computer. In our exemplary case provides the terminal window provides the following output (listing three already created virtual environments):\nmyusername@mbp ~ % workon\nmyenv_dwork01\nmyenv_dwork02\nmyenv_test1\nTo activate one specific virtual environment we just need to use the workon command from virtualenvwrapper together with the name of the virtual environment (for our example let’s choose myenv_dwork2):\nmyusername@mbp ~ % workon myenv_dwork02\nAfter having activated the selected virtual environment successfully you will note that the prompt of your terminal window has changed to this format: The activated virtual environment is explicitly stated within the round brackets:\n(myenv_dwork02) myusername@mbp ~ %\nNow we can proceed with installing the two required packages in this virtual environment using the pip command. Please execute the following command in your terminal window (the feedback from the terminal will tell you when the installation was concluded):\npip install ipykernel jupyter"
  },
  {
    "objectID": "posts/post-two/index.html#install-any-additional-python-packages-within-the-same-activated-virtual-environment",
    "href": "posts/post-two/index.html#install-any-additional-python-packages-within-the-same-activated-virtual-environment",
    "title": "Using Jupyter Notebook in virtual environments in a free source-code editor (VSCodium/VS Code)",
    "section": "3. Install any additional Python packages (within the same activated virtual environment)",
    "text": "3. Install any additional Python packages (within the same activated virtual environment)\nKeeping the same virtual environment activated (in our example case: myenv_dwork02) we can proceed with installing those packages that we intend to use later for our data project (within the Jupyter Notebook document).\nLet’s assume we know to use two very popular Python packages for data analysis (pandas) and data visualization (seaborn). We can install both packages by calling the following command (please add/modify the package names according to your needs) in your terminal window:\npip install -U pandas seaborn\nOne additional detail: The flag -U/--upgrade with the pip install command used above means to upgrade the specified packages to their latest version."
  },
  {
    "objectID": "posts/post-two/index.html#make-a-new-ipykernel-and-give-it-a-name",
    "href": "posts/post-two/index.html#make-a-new-ipykernel-and-give-it-a-name",
    "title": "Using Jupyter Notebook in virtual environments in a free source-code editor (VSCodium/VS Code)",
    "section": "4. Make a new ipykernel and give it a name",
    "text": "4. Make a new ipykernel and give it a name\nTo create and name the new ipykernel, run the Python command shown below in your terminal window. You should give the new ipykernel a name: in our example, I will call it myenv_dwork02_kernel (to underline the connection of the kernel with the virtual environment). Feel free to choose a name that suits your preferences.\npython -m ipykernel install --name=myenv_dwork02_kernel"
  },
  {
    "objectID": "posts/post-two/index.html#create-a-new-ipykernel-and-give-it-a-name",
    "href": "posts/post-two/index.html#create-a-new-ipykernel-and-give-it-a-name",
    "title": "Using Jupyter Notebook in virtual environments in a free source-code editor (VSCodium/VS Code)",
    "section": "4. Create a new ipykernel and give it a name",
    "text": "4. Create a new ipykernel and give it a name\nTo create and name the new ipykernel run the Python command shown below in your terminal window. You should give the new ipykernel a name: in our example I will call it myenv_dwork02_kernel (to underline the connection of the kernel with the virtual environment). Feel free to choose a name that suits your preferences:\npython -m ipykernel install --name=myenv_dwork02_kernel"
  },
  {
    "objectID": "posts/post-two/index.html#create-a-new-jupyter-notebook-document-and-open-it-with-your-vscodium-editor",
    "href": "posts/post-two/index.html#create-a-new-jupyter-notebook-document-and-open-it-with-your-vscodium-editor",
    "title": "Using Jupyter Notebook in virtual environments in a free source-code editor (VSCodium/VS Code)",
    "section": "5. Create a new Jupyter Notebook document and open it with your VSCodium editor",
    "text": "5. Create a new Jupyter Notebook document and open it with your VSCodium editor\nWe managed to reach the very last step of our setup. To that end we just need to create a fresh (empty) Jupyter Notebook document (having the file extension .ipynb) and open this file in our VSCodium editor.\nBefore creating the new .ipynb file we should decide where we want to create this file: it seems to be conveniant practice to establish a dedicated folder for a given data project. Therefore, I will create such a folder (to be named dwork02) within my home directory by executing the following lines in the terminal window:\nmkdir  ~/dwork02 \nBy calling the touch command we will now create the .ipynb file (to be named new_noteb) in the project folder we have just created:\ntouch ~/dwork02/new_noteb.ipynb\n\n\n\n\n\n\nSome nice shortcuts\n\n\n\n\n\nYou can create the folder and the .ipynb file also in just one single line as follows:\nmkdir  ~/dwork02 && touch ~/dwork02/new_noteb.ipynb\nIn case you want to establish a new directory together with its full directory structure, you can call mkdir together with the flag -p/--parents (this option will make sure that directories are created where needed - in case a given directory already exists no error will be triggered):\nmkdir -p  ~/Coding/dwork02 && touch ~/Coding/dwork02/new_noteb.ipynb\n\n\n\nAfter having created the fresh Jupyter Notebook file we should open it now from within the VSCodium editor. To do so, start the VSCodium application, select from the main top-bar menu the section File and choose Open (see the screenshot below).\n\n\n\nVSCodium: Open the created .ipynb file\n\n\nBrowse to the location, where you just have created the new .ipynb file (in our example this is the dwork_02 directory) and open this file. Now, when the notebook opens up in your editor, click on the kernel picker located in the top right corner (see the arrow and marked highlight below):\n\n\n\nVSCodium: Location of the kernel picker (button)\n\n\nAfter clicking the kernel picker you will see a list of possible kernels to choose from (see the screenshot with the marked highlights below). Following our example case we will select the kernel named myenv_dwork02_kernel (or whatever you have named your kernel before).\n\n\n\nVSCodium: List of available kernels\n\n\nIf you don’t see your previously created kernel in the kernel list, close VSCodium completely and re-open it. It should now appear in the refreshed list as shown above.\nWhen you have your brand-new Jupyter Notebook document open in VSCodium and your selected kernel is running (as indicated by the kernel picker in the top right corner: please see the highlighted screenshot below) you have made it! Congratulations!\n\n\n\nVSCodium: Selected kernel running in new Jupyter notebook file\n\n\n\n\n\n\n\n\nHow to add a new Python package to the current Jupyter kernel?\n\n\n\n\n\nImagine that you have not included all python packages that you need to use in your Jupyter notebook at the time when you initialized its setup (see step 3). Don’t worry! You can still do it within your running Jupyter notebook.\nFor a concrete example let’s say we want to include the great machine learning package yellowbrick to our current kernel: just add a new code cell in your Jupyter notebook, then paste and run the following code in this cell of the notebook:\nimport sys\n!{sys.executable} -m pip install yellowbrick\n\n\n\nHappy coding & Cheers! 😃"
  }
]